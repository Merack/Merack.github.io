{
    "version": "https://jsonfeed.org/version/1",
    "title": "Merack&#x27;s Home",
    "description": "",
    "home_page_url": "https://blog.merack.top",
    "feed_url": "https://blog.merack.top/feed.json",
    "user_comment": "",
    "author": {
        "name": "Merack"
    },
    "items": [
        {
            "id": "https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html",
            "url": "https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html",
            "title": "用又拍云作为CDN加速GitHub Pages简要配置记录",
            "summary": "<h2 data-heading=\"引言\">引言</h2>\n<p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>\n",
            "content_html": "<h2 data-heading=\"引言\">引言</h2>\n<p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>\n\n<h2 data-heading=\"必备条件\">必备条件</h2>\n<ol>\n<li>已经备案的域名(国内的CDN厂商基本都要求)</li>\n<li>又拍云账号: <a href=\"https://console.upyun.com/register/?invite=SJxy8d1Sw\" target=\"_blank\" rel=\"noopener noreferrer\">点我注册</a>, 注册完毕后可以到 <a href=\"https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener noreferrer\">又拍云联盟</a>页面按要求申请开发者每月免费配额, 一般在自己网站挂一个又拍云的logo然后提交申请就可以了.需要注意的是, 当前你的网站是要有一定内容的不然不会通过(实测我的博客就发了三篇文章就申请通过了).</li>\n</ol>\n<h2 data-heading=\"简要配置\">简要配置</h2>\n<h3 data-heading=\"GitHub Pages设置\">GitHub Pages设置</h3>\n<p>静态网站如何生成不在本文讨论范围, 这里只讨论自定义域名相关话题. 在托管静态网站的GitHub仓库中点击Settings-&gt;Pages-&gt;Custom domain 中配置你已经备案的域名, 比如我这里是blog.merack.top. 需要注意的是如果你的page不是由GitHub Actions workflow生成的, 那么需要确认仓库根目录中有一个CNAME文件, 里面存储的是你自定义域名, 具体请看GitHub Pages的文档: <a rel=\"noopener\" class=\"external-link\" href=\"https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors\" target=\"_blank\">https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors</a></p>\n<h3 data-heading=\"又拍云设置\">又拍云设置</h3>\n<h4 data-heading=\"创建服务\">创建服务</h4>\n<p>在又拍云创建CDN服务, 加速域名填你已备案的自定义域名, 应用场景选网页图片, 实际上根据<a data-tooltip-position=\"top\" aria-label=\"https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f\" rel=\"noopener\" class=\"external-link\" href=\"https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f\" target=\"_blank\">又拍云的文档</a>目前应用场景只是一个标示, 功能是一样的, 随便选也行. 创建完成后又拍云会给出一个CNAME域名, 在域名域名解析中为域名创建一个CNAME记录, 记录值是又拍云会给出的这个CNAME域名.</p>\n<div><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.merack.top/media/posts/8/1717757460.png\" alt=\"\" width=\"1228\" height=\"292\" sizes=\"100vw\" srcset=\"https://blog.merack.top/media/posts/8/responsive/1717757460-xs.png 300w ,https://blog.merack.top/media/posts/8/responsive/1717757460-sm.png 480w ,https://blog.merack.top/media/posts/8/responsive/1717757460-md.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757460-lg.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757460-xl.png 1360w ,https://blog.merack.top/media/posts/8/responsive/1717757460-2xl.png 1600w\"></figure></div>\n<p>回源协议选协议跟随,源站证书校验我这里没开, 源站地址根据<a data-tooltip-position=\"top\" aria-label=\"https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain\" rel=\"noopener\" class=\"external-link\" href=\"https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain\" target=\"_blank\">GitHub Pages的文档</a>填以下IP(建议配置的时候去文档里找, 防止GitHub那边更新IP), 然后点击确定创建服务.</p>\n<p><code>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</code></p>\n<figure class=\"post__image\"><img  src=\"https://blog.merack.top/media/posts/8/1717758315.png\" alt=\"\" width=\"944\" height=\"426\" sizes=\"100vw\" srcset=\"https://blog.merack.top/media/posts/8/responsive/1717758315-xs.png 300w ,https://blog.merack.top/media/posts/8/responsive/1717758315-sm.png 480w ,https://blog.merack.top/media/posts/8/responsive/1717758315-md.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717758315-lg.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717758315-xl.png 1360w ,https://blog.merack.top/media/posts/8/responsive/1717758315-2xl.png 1600w\"></figure><br><figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.merack.top/media/posts/8/1717757656.png\" alt=\"\" width=\"824\" height=\"545\" sizes=\"100vw\" srcset=\"https://blog.merack.top/media/posts/8/responsive/1717757656-xs.png 300w ,https://blog.merack.top/media/posts/8/responsive/1717757656-sm.png 480w ,https://blog.merack.top/media/posts/8/responsive/1717757656-md.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757656-lg.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757656-xl.png 1360w ,https://blog.merack.top/media/posts/8/responsive/1717757656-2xl.png 1600w\"></figure>\n<h4>CDN功能设置</h4>\n<p>接着进入到CDN功能配置.</p>\n<h5>回源管理</h5>\n<p>在回源管理中回源Host中填入你自己的自定义域名,  比如我这里是blog.merack.top, 因为源站设置中的IP托管了成千上万个GitHub Pages, 需要回源Host中的域名才能找到你的.</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.merack.top/media/posts/8/1717760653.png\" alt=\"\" width=\"1280\" height=\"271\" sizes=\"100vw\" srcset=\"https://blog.merack.top/media/posts/8/responsive/1717760653-xs.png 300w ,https://blog.merack.top/media/posts/8/responsive/1717760653-sm.png 480w ,https://blog.merack.top/media/posts/8/responsive/1717760653-md.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717760653-lg.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717760653-xl.png 1360w ,https://blog.merack.top/media/posts/8/responsive/1717760653-2xl.png 1600w\"></figure>\n<p><strong>注意!!!</strong>: 如果你在上面的步骤中已经为GitHub仓库配置了自定义域名, 这里的回源Host填上的就是该域名, 而不是xxx.github.io, 否则会造成too many redirects 的错误.</p>\n<h5>验证</h5>\n<p>到这里就可以就可以验证是否配置成功了, 直接ping 或者dig我们的域名, 如果返回的是nm.aicdn.com, 那么就表示我们成功解析到了CDN,访问网站检查是否有其他问题</p>\n<figure class=\"post__image\"><img loading=\"lazy\"  src=\"https://blog.merack.top/media/posts/8/1717761171.png\" alt=\"\" width=\"576\" height=\"252\" sizes=\"100vw\" srcset=\"https://blog.merack.top/media/posts/8/responsive/1717761171-xs.png 300w ,https://blog.merack.top/media/posts/8/responsive/1717761171-sm.png 480w ,https://blog.merack.top/media/posts/8/responsive/1717761171-md.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717761171-lg.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717761171-xl.png 1360w ,https://blog.merack.top/media/posts/8/responsive/1717761171-2xl.png 1600w\"></figure>\n<p>更进一步, 可以使用一些在线ping网站来检测CDN是否根据不同地区就近返回: <a href=\"https://www.itdog.cn/ping\">https://www.itdog.cn/ping</a></p>\n<h5>HTTPS</h5>\n<p>此外强烈建议配置下https, 又拍云申购SSL证书中选择Let's Encrypt是免费的, 又拍云会自动帮你续期.</p>\n<h5>其他配置与注意事项</h5>\n<ol>\n<li>其他的配置按需求点点就行, 需要注意的是我看到一些资料说HTTP 302 调度这个功能可能会造成一些问题, 建议不开这个. </li>\n<li>如果要开源站资源迁移这个功能, 需要配合缓存配置中将资源缓存时间配置为24小时以上才会触发迁移. 如果要验证缓存时间可以通过浏览器的开发者工具检查响应头的Cache-Control字段, 具体可以看<a href=\"https://docs.upyun.com/cdn/guide/#_6\">又拍云的这个文档</a>. 不过, 除非你了解<a href=\"https://help.upyun.com/knowledge-base/cdn-source-resource-move/\">源站资源迁移的访问机制</a>, 否则不建议开启, 会对资源更新造成一些问题.</li>\n</ol>\n<h2>结语</h2>\n<p>到此又拍云CDN加速GitHub Pages就配置完成了, 本文只是我配置时的一些简要记录, 仅供参考. 如果遇到问题可以通过邮件与我交流. 像其他的一些静态网站加速, 例如GitLab, Vercel, Netlify, Cloudflare Pages, 思路应该也大致相同, 但还是要根据不同平台调整.</p>",
            "author": {
                "name": "Merack"
            },
            "tags": [
            ],
            "date_published": "2024-06-07T20:56:06+08:00",
            "date_modified": "2024-06-07T22:12:30+08:00"
        },
        {
            "id": "https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html",
            "url": "https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html",
            "title": "shell编程:输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天",
            "summary": "做实验时碰的到一道shell编程题: 输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天 本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧 脚本很简单, 主要是用date命令 #!/bin/bash #create By Merack&hellip;",
            "content_html": "<p>做实验时碰的到一道shell编程题:<br>输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天<br>本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧<br>脚本很简单, 主要是用date命令  </p><pre><code class=\"language-sh\">#!/bin/bash\n#create By Merack\n#merack@qq.com\n\n\n#get the current year, month, day\ncurrentYear=`date +&quot;%Y&quot;`\ncurrentMonth=`date +&quot;%m&quot;`\ncurrentDay=`date +&quot;%d&quot;`\n\n#check whether the birthday has passed in this year \nif [[ currentMonth -lt $2  ]]\nthen\n    let &quot;passFlag=0&quot;\nelif [[ currentMonth -eq $2 ]]\nthen\n    if [[ currentDay -gt $3  ]]\n    then\n        let &quot;passFlag=1&quot;\n    else\n        let &quot;passFlag=0&quot;\n    fi\nelse\n    let &quot;passFlag=1&quot;\nfi\n\n#get age\nif [[ $passFlag -eq 0  ]] \nthen\n    let &quot;age=$currentYear-$1-1&quot;\nelse\n    let &quot;age=$currentYear-$1&quot;\nfi\necho &quot;your age: $age&quot;\n\n\n#get next Birthday\nif [[ passFlag -eq 1 ]]\nthen\n    echo &quot;Your birthday has passed in this year&quot;\n        let &quot;nextYea=currentYear+1&quot;\n        nextBirthday=$nextYea-$2-$3\n        nowStr=`date +&quot;%s&quot;`\n        nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`\n        let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;\n        echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;\nelse\n    nextBirthday=$currentYear-$2-$3\n    nowStr=`date +&quot;%s&quot;`\n    nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`\n    let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;\n    echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;\nfi\n</code></pre>\n<p>运行结果:<br><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://pic.rmb.bdstatic.com/bjh/790caf37116577e34a9d4e311f7faca8.png\" alt=\"pic1.png\"  data-is-external-image=\"true\"></figure></p>",
            "author": {
                "name": "Merack"
            },
            "tags": [
                   "Linux"
            ],
            "date_published": "2021-05-09T21:00:00+08:00",
            "date_modified": "2024-06-06T10:29:22+08:00"
        },
        {
            "id": "https://blog.merack.top/bai-du-beictfbi-sai-shi-yi-yue-chang-xiao-ke-ai-writeupwei.html",
            "url": "https://blog.merack.top/bai-du-beictfbi-sai-shi-yi-yue-chang-xiao-ke-ai-writeupwei.html",
            "title": "“百度杯”CTF比赛 十一月场 &#x27;小可爱&#x27; writeup(伪)",
            "summary": "题目内容： 小可爱最喜欢的图片就是它了 tips：txt文件内容即为密码 题目给出了一张图片 附上下载链接: 百度云 1.把文件后缀改成rar,发现是一个可以打开的压缩包,不过需要密码 根据题目提示,txt文件里面的内容是密码,而txt文件名提示我们密码是8位数字, 解题的思路是通过CRC32检测来爆破txt里面的内容,从上图中我们可以看到txt的CRC32值为BACAB29E 2.跑py脚本解密&hellip;",
            "content_html": "<h4 id=\"题目内容：\">题目内容：</h4>\n<p>小可爱最喜欢的图片就是它了\ntips：txt文件内容即为密码</p><!-- more -->\n\n<p>题目给出了一张图片</p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JfbJs.jpg\" alt=\"wang.4409F5F40438B0C7C4C4E2D9C1883CA4.jpg\"  data-is-external-image=\"true\"></figure><p>附上下载链接:\n<a href=\"https://pan.baidu.com/s/1tRHEDzHIzR63-E_BVxDGZg\">百度云</a></p><h4 id=\"writeup\">writeup</h4>\n<p>1.把文件后缀改成rar,发现是一个可以打开的压缩包,不过需要密码</p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JhkS1.png\" alt=\"Screenshot_2020-01-07_23-33-22.png\"  data-is-external-image=\"true\"></figure><p>根据题目提示,txt文件里面的内容是密码,而txt文件名提示我们密码是8位数字, 解题的思路是通过CRC32检测来爆破txt里面的内容,从上图中我们可以看到txt的CRC32值为BACAB29E</p><p>2.跑py脚本解密</p><p>代码如下(Python2环境)</p><pre><code>from zlib import crc32\nimport random\n\nchar=&#39;0123456789&#39;\n\ndef crc32_f(data):\n    return hex(crc32(data)&amp;0xffffffff)[2:10]\n\nlength=input(&#39;length:&#39;)\ncrc32_=raw_input(&#39;crc32:&#39;).lower()\n\nwhile True:\n    text=&#39;&#39;\n    for i in range(length):\n        text+=char[random.randint(0,len(char)-1)]\n    if crc32_f(text)==crc32_:\n        raw_input(&#39;find it:&#39;+text)\n        exit\n</code></pre>\n<p>脚本运行时需要输入密码长度,这里填8, 然后是CRC密文, 这里填BACAB29E</p><p>接下来就是漫长的等待了,最后跑出密码:34878956</p><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JhEy6.png\" alt=\"Screenshot_2020-01-08_00-54-41.png\"  data-is-external-image=\"true\"></figure><p>3.有了密码就可以把压缩包里的图片解压出来了,是一张撕裂成好几部分的二维码, 使用ps拼好或者打印出来裁剪拼好扫描结果应该就是flag了,由于不会ps最终答案你们自己来吧(逃</p>",
            "author": {
                "name": "Merack"
            },
            "tags": [
                   "CTF"
            ],
            "date_published": "2020-06-28T21:02:00+08:00",
            "date_modified": "2024-06-06T10:30:25+08:00"
        },
        {
            "id": "https://blog.merack.top/shi-yong-pythonjiao-ben-teng-xun-yun-serverlessshi-xian-qu-qi-yun-pan-zi-dong-qian-dao.html",
            "url": "https://blog.merack.top/shi-yong-pythonjiao-ben-teng-xun-yun-serverlessshi-xian-qu-qi-yun-pan-zi-dong-qian-dao.html",
            "title": "使用Python脚本+腾讯云serverless实现曲奇云盘自动签到(已失效)",
            "summary": "此文章已失效并且不再更新 曲奇云盘每天有3个签到任务, 其中有一个需要上传文加后才能签到, 这个没有实现自动签到现已全部实现签到 目前曲奇云盘的签到是送曲奇豆, 至于曲奇豆有什么用我个人的看法是:没什么卵用, 我写这个脚本只是练习下Python 注册腾讯云, 创建一个serverless云函数, 选择空白模板,&hellip;",
            "content_html": "<p><strong>此文章已失效并且不再更新</strong></p><h3 id=\"说明\">说明</h3>\n<p>曲奇云盘每天有3个签到任务, <del>其中有一个需要上传文加后才能签到, 这个没有实现自动签到</del>现已全部实现签到</p><!-- more -->\n\n<h3 id=\"签到有什么用\">签到有什么用?</h3>\n<p>目前曲奇云盘的签到是送曲奇豆, 至于曲奇豆有什么用我个人的看法是:没什么卵用, 我写这个脚本只是练习下Python</p><h3 id=\"使用说明\">使用说明</h3>\n<h4 id=\"1创建serverless云函数\">1.创建serverless云函数</h4>\n<p>注册腾讯云, 创建一个serverless云函数, 选择空白模板, 运行环境选择Python3\n<figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JflrT.png\" alt=\"2020_0625_1593016738.png\"  data-is-external-image=\"true\"></figure></p><h4 id=\"2输入代码\">2.输入代码</h4>\n<p>将下面提供的代码复制到index.py里,目录里好像还有个config.json, 可以删了没什么用\n代码gitee地址:<a href=\"https://gitee.com/Merack/quqiSign\">\nhttps://gitee.com/Merack/quqiSign</a></p><h4 id=\"3修改代码配置\">3.修改代码配置</h4>\n<ol>\n<li>填入账号密码</li>\n<li>修改<code>IS_UPLOAD</code>决定是否要开启文件上传签到功能, 改功能默认开启</li>\n<li>修改<code>parent_id</code>文件上传的目录, 该值默认为0,即根目录<br>下面是获取<code>parent_id</code>的方法<br>首先登陆网页版曲奇云盘, 进入要存放上传文件的文件夹, 比如这里我的文件夹是temp<br><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9Jf8ZF.png\" alt=\"2020_0707_1594085154.png\"  data-is-external-image=\"true\"></figure>\n然后观察地址栏URl, URL末尾的数字便是<code>parent_id</code>, 比如图例里的是 88  </li>\n<li>修改好后点击保存</li>\n</ol>\n<h4 id=\"4配置超时时间\">4.配置超时时间</h4>\n<p>因为在执行后需要等待几秒钟曲奇服务器才会记录,直接签到的话会导致逛群组签到这一项失败<br>因此在逛群组签到前我设置了5秒的休眠<br>为了防止在函数在休眠期间就被腾讯云强制停止, 这里需要把函数配置里的超时时间设置成&gt;5s, 我个人的设置是20s<br><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JfwM6.png\" alt=\"2020_0627_1593188640.png\"  data-is-external-image=\"true\"></figure></p><h4 id=\"5测试\">5.测试</h4>\n<p>点击”函数代码”, 再点击左下角的测试, 观察执行日志来确认是否执行成功了<br><figure class=\"post__image\"><img src=\"https://s1.ax1x.com/2023/05/03/p9JfBqO.png\" alt=\"success\"  data-is-external-image=\"true\"></figure></p><p> 如果签到过了结果就是如下图<br> <figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9JfrZD.png\" alt=\"abc\"  data-is-external-image=\"true\"></figure></p><p> 开启文件上传签到<br><figure class=\"post__image\"><img loading=\"lazy\" src=\"https://s1.ax1x.com/2023/05/03/p9Jfsde.png\" alt=\"2020_0707_1594052871.png\"  data-is-external-image=\"true\"></figure></p><h4 id=\"6定时触发\">6.定时触发</h4>\n<p>创建一个定时触发器\n我的设定是每天00:30执行签到</p><pre><code>0 30 0 * * * *\n</code></pre>\n<p>具体可以根据自己的情况来\n根据 cron表达式文档来就行: <a href=\"https://cloud.tencent.com/document/product/583/9708#cron-.E8.A1.A8.E8.BE.BE.E5.BC.8F\">腾讯官方文档</a>  </p><h4 id=\"7相关说明\">7.相关说明:</h4>\n<p> 1.每天自动上传到云盘里文件是代码仓库里的1.txt,上传文件我写死了就是这个, 不可以自定义.需要自定义的自己修改代码, 我懒得写了<br> 2.第一天会以新文件的方式上传, 后面便是以更新的方式上传了, 也就是文件不会增加 ,永远只有一个, 14字节的txt, 因此不用担心容量问题, 也不用定时来清理<br> 3.每次文件上传都会导致你的<strong>web端的登陆失效,手机端app登陆不受影响</strong>, 因此经常使用web端的网友请自己斟酌是否开启文件上传签到  </p>",
            "author": {
                "name": "Merack"
            },
            "tags": [
                   "Python"
            ],
            "date_published": "2020-06-27T21:04:00+08:00",
            "date_modified": "2024-06-06T10:29:58+08:00"
        }
    ]
}
