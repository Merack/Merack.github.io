<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Merack&#x27;s Home</title>
    <link href="https://blog.merack.top/feed.xml" rel="self" />
    <link href="https://blog.merack.top" />
    <updated>2025-06-01T17:38:27+08:00</updated>
    <author>
        <name>Merack</name>
    </author>
    <id>https://blog.merack.top</id>

    <entry>
        <title>shell脚本 - Linux定时备份并通过WebDAV上传至坚果云</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shelljiao-ben-linuxding-shi-bei-fen-bing-tong-guo-webdavshang-chuan-zhi-jian-guo-yun.html"/>
        <id>https://blog.merack.top/shelljiao-ben-linuxding-shi-bei-fen-bing-tong-guo-webdavshang-chuan-zhi-jian-guo-yun.html</id>
            <category term="Linux"/>

        <updated>2025-06-01T17:38:27+08:00</updated>
            <summary>
                <![CDATA[
                    为了保证数据的安全与完整, 对Linux上的重要数据和配置进行备份是很必要的, 备份文件最好在本地存一份, 上传到云服务一份. 我的服务器上的数据比较少, 打包压缩完大概是100M左右, 思来想去打算用WebDAV的方式传到坚果云. 坚果云存储空间不限量但是普通用户每月的上传流量限制是1G, 对我来说是绰绰有余了. 保存以下sh代码,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>为了保证数据的安全与完整, 对Linux上的重要数据和配置进行备份是很必要的, 备份文件最好在本地存一份, 上传到云服务一份. 我的服务器上的数据比较少, 打包压缩完大概是100M左右, 思来想去打算用WebDAV的方式传到坚果云. <a href="https://www.jianguoyun.com/">坚果云</a>存储空间不限量但是普通用户每月的上传流量限制是1G, 对我来说是绰绰有余了.</p>
<h2>准备</h2>
<ol>
<li>坚果云账号, 在网页端右上角 账户信息 -&gt; <a href="https://www.jianguoyun.com/d/home#/safety">安全选项</a> 里添加一个应用, 记住生成的WebDAV密码, 账户, WebDAV服务器地址</li>
<li>根据 <a href="https://www.cnblogs.com/misterh/p/9830905.html">这篇文章</a>(https://www.cnblogs.com/misterh/p/9830905.html) 安装cadaver, 并配置非交互式登录</li>
</ol>
<h2>代码</h2>
<p>保存以下sh代码, 根据你的情况修改directories, db_user, db_password, db_names, backup_file等变量</p>
<pre class="EnlighterJSRAW" data-enlighter-language="bash">#!/bin/bash

# 定义要备份的目录
directories=("/etc/nginx" "/opt" "/var/www")

# 定义数据库账户密码
db_user="user"
db_password="passwd"
# 定义要备份的数据库名称列表
db_names=("mydb")
DATE=$(date +%Y%m%d)
# 定义生成的备份文件名,以日期命名
backup_file="backup_${DATE}.tar.gz"

# 输出当前时间和开始信息
start_time=$(date +%s)
echo "======================Backup started at $(date)========================="

# 创建一个临时目录来存放SQL文件
temp_dir="temp_backup"
mkdir ${temp_dir}

# 导出每个数据库到SQL文件
for db_name in "${db_names[@]}"; do
    sql_file="${temp_dir}/${db_name}.sql"
    mysqldump -u ${db_user} -p${db_password} ${db_name} &gt;${sql_file}
done

# 将目录和SQL文件添加到备份中
tar -czf ${backup_file} --transform 's,^,backup/,' "${directories[@]}" -C ${temp_dir} .

# 删除临时目录及其中的SQL文件
rm -rf ${temp_dir}

# 计算并输出耗时
end_time=$(date +%s)
elapsed_time=$((end_time - start_time))

# 获取备份文件的大小
backup_file_size=$(stat --format "%s" ${backup_file})

# 输出完成信息、备份文件大小和耗时
echo "Backup completed. File: ${backup_file}, Size:$(numfmt --to=iec-i --suffix=B ${backup_file_size})"

# WebDav上传, 路径中的serverBackup要求是坚果云上已创建好的文件夹, 也可以不填最后这个路径, 则是上传到根目录
echo "Uploading..."
cadaver https://dav.jianguoyun.com/dav/serverBackup &lt;&lt; EOF
put ${backup_file}
quit
EOF
echo "Upload Done! "

echo "Elapsed time: ${elapsed_time} seconds"
echo "===================== Backup Done at $(date)================================="
</pre>
<figure class="alignnone size-full wp-image-187">通过<code>bash backup.sh</code> 测试一下, 如果没问题就可以进行下一步了 <a href="https://cdn.merack.top/wp-content/uploads/2025/06/88f8cca6-9d32-3edc-76f4-60b98984dc5c.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/06/88f8cca6-9d32-3edc-76f4-60b98984dc5c.png" alt="" width="960" height="327" data-is-external-image="true"></figure></a></p>
<h2>设定crontab定时任务</h2>
<p>让脚本每周一凌晨3点定时运行并输出日志到指定文件</p>
<pre>0 3 * * 1 /root/backup.sh &gt;&gt; /opt/log/backup.log</pre>
<figure class="alignnone size-full wp-image-188">关于crontab更多写法请自行查找吧 <a href="https://cdn.merack.top/wp-content/uploads/2025/06/169908cf-306f-66d8-c99d-94c6725decef.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/06/169908cf-306f-66d8-c99d-94c6725decef.png" alt="" width="1422" height="504" data-is-external-image="true"></figure></a></p>
<h2>扩展</h2>
<p>如果你的备份文件比较大, 坚果云的免费流量无法满足你的要求, 可以考虑使用各云服务商的对象存储, 看了七牛, 阿里, 腾讯的都不是很贵, 也提供了shell上传的示例代码. 如果你的服务器在国外, 那么像Amazon, Cloudflare等国外云服务商的对象存储貌似更加便宜.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用Cloudflare worker加速Cloudflare R2访问速度</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shi-yong-cloudflare-workerjia-su-cloudflare-r2fang-wen-su-du.html"/>
        <id>https://blog.merack.top/shi-yong-cloudflare-workerjia-su-cloudflare-r2fang-wen-su-du.html</id>

        <updated>2025-03-17T01:50:36+08:00</updated>
            <summary>
                <![CDATA[
                    cloudflare R2 提供了免费10G的对象存储并且兼容Amazon S3 api 操作, 与大多数对象存储提供商不一样的是R2的流出流量是免费的, 不用担心请求被恶意刷爆第二天银行来收房子的情况发生. 但是cloudflare给R2分配的ip都是xxx.xxx.xxx.1形式的ip, 这种ip节点在国内的访问体验很不好,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <figure class="alignnone size-full wp-image-169">cloudflare R2 提供了免费10G的对象存储并且兼容Amazon S3 api 操作, 与大多数对象存储提供商不一样的是R2的流出流量是免费的, 不用担心请求被恶意刷爆第二天银行来收房子的情况发生. 但是cloudflare给R2分配的ip都是<strong>xxx.xxx.xxx.1</strong>形式的ip, 这种ip节点在国内的访问体验很不好, 特别是在移动网络下, 基本无法访问. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/7a2f2732-8432-8240-5b2c-8e317f67adf3.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/7a2f2732-8432-8240-5b2c-8e317f67adf3.png" alt="" width="766" height="823" data-is-external-image="true"></figure></a> 然而计算机领域里有句叫'没有什么问题是加一个中间层不能解决的', 而cloudflare里的worker刚好可以当这个'中间层'. worker是cloudflare提供的一个可以运行js/ts代码的serverless容器.</p>
<h2>设计原理</h2>
<figure class="alignnone size-full wp-image-179">我们无法更改cloudflare为R2分配的ip, 但是worker的路由我们是可以配置. 由此我们可以通过优选好的路由连接到worker, 然后让worker作为中间人去帮我们访问R2的资源, worker和r2同属于cloudflare网络, 它们之间的通信会非常快. 这样一来就能实现R2的'加速'访问. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/78935e73-35ca-e855-23db-17a42b2a8c0d.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/78935e73-35ca-e855-23db-17a42b2a8c0d.png" alt="" width="636" height="276" data-is-external-image="true"></figure></a> 本篇文章演示中R2绑定的访问域名是<strong>static.merack.top</strong>, worker通过worker路由绑定的域名是<strong>cdn.merack.top</strong>. 其中cdn.merack.top是最终给用户看到的域名. 用户向cdn.merack.top发出请求调用worker, worker请求R2: static.merack.top, 将R2的数据返回给用户.</p>
<h2>创建worker</h2>
<figure class="alignnone size-full wp-image-170">点击左侧workers和pages, 新建一个hello world 的worker, 不用选其他模板. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/e6015d68-3116-04a4-94a0-b208e0e802dd.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/e6015d68-3116-04a4-94a0-b208e0e802dd.png" alt="" width="798" height="423" data-is-external-image="true"></figure></a> 然后点击右上角的编辑代码按钮修改为如下代码</p>
<pre class="EnlighterJSRAW" data-enlighter-language="js">const R2_DOMAIN = 'static.merack.top'; // 改成自己的R2公共访问域名

async function handleRequest(request) {
  try {
    const url = new URL(request.url);
    
    // 构建新的R2资源URL
    const targetUrl = new URL(`https://${R2_DOMAIN}`);
    targetUrl.pathname = url.pathname;
    targetUrl.search = url.search;

    // 复制并修改请求头
    const headers = new Headers(request.headers);
    headers.set('Host', R2_DOMAIN);
    headers.delete('Cookie'); // 移除不必要的cookie头

    // 创建新请求
    const newRequest = new Request(targetUrl, {
      method: request.method,
      headers: headers,
      redirect: 'follow'
    });

    let response = await fetch(newRequest);
    return response;
  } catch (err) {
    // 错误处理
    return new Response(err.stack, { 
      status: 500,
      headers: { 'Content-Type': 'text/plain' }
    });
  }
}

// 监听所有请求
addEventListener('fetch', event =&gt; {
  event.respondWith(handleRequest(event.request));
});</pre>
<p><code>R2_DOMAIN</code> 常量改成自己的R2公共访问域名, 比如我这里是static.merack.top, 然后点击部署</p>
<h2>配置worker路由</h2>
<figure class="alignnone size-full wp-image-177">点击设置-&gt;域和路由, 点击右上方的添加按钮, 类型选择<strong>路由</strong> <a href="https://cdn.merack.top/wp-content/uploads/2025/03/49676e52-e8e6-e7b1-f1ee-5dfadc0517a0.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/49676e52-e8e6-e7b1-f1ee-5dfadc0517a0.png" alt="" width="490" height="466" data-is-external-image="true"></figure></a></p>
<figure class="alignnone size-full wp-image-178">接下来填入需要面向用户的那个域名, 路径填/*, 例如我这里填的就是<strong>cdn.merack.top/* </strong> <a href="https://cdn.merack.top/wp-content/uploads/2025/03/5ec85094-a28c-82db-e8e1-fa001a47ecd2-1.png"><img  src="https://cdn.merack.top/wp-content/uploads/2025/03/5ec85094-a28c-82db-e8e1-fa001a47ecd2-1.png" alt="" width="1249" height="480" data-is-external-image="true"></figure></a> 这样用户访问cdn.merack.top时就触发worker去代理请求到R2, 但是此时还并不是优选的路由, 我们还需要修改下DNS解析 添加DNS记录让cdn.merack.top指向优选好的cloudflare cdn节点ip, 关于cf如何优选ip网上有很多教程就不赘述了, 图方便的话可以直接添加一个<strong>cname</strong>记录到别人的优选域名, 这里我用的是 <strong>cloudflare.182682.xyz</strong> , 也可以填我的博客域名<strong>www.merack.top</strong> , 但是注意后面的小黄云记得关闭, 让其状态为 '仅DNS' 模式, 这样你的cname才有意义. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/2a8003ad-6428-d0c1-fda8-b9ccf732b974.png"><figure class="alignnone size-full wp-image-180"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/2a8003ad-6428-d0c1-fda8-b9ccf732b974.png" alt="" width="1345" height="154" data-is-external-image="true"></figure></a> 点击保存后就可以将我们的访问域名换成worker路由的域名看看效果了.</p>
<h2>测试</h2>
<figure class="alignnone size-full wp-image-172">经过一番折腾后效果对比以前有了很大提升, 但还是有些地区无法正常访问, 这取决于当地的网络状况和优选ip的质量. 如果要做到100%的可用性的话, 建议还是花点钱买个好点的服务, 比如Amazon S3 + Amazon Cloudfont, 如果你的域名有备案, 国内云服务商提供的对象存储也是不错的选择. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/8875d1e9-91f1-ff21-1ff6-c344b2b64688.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/8875d1e9-91f1-ff21-1ff6-c344b2b64688.png" alt="" width="748" height="812" data-is-external-image="true"></figure></a></p>
<h2>限制</h2>
<figure class="alignnone size-full wp-image-174">这个方案的限制主要来自worker. worker的免费订阅最关键的两个限制是CPU时间和日请求额度. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/4394b2a9-0352-0851-da1d-1b706ac235d8.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/4394b2a9-0352-0851-da1d-1b706ac235d8.png" alt="" width="452" height="436" data-is-external-image="true"></figure></a></p>
<ol>
<li>每个请求的CPU时间是10毫秒, 超过这个时间请求会中断, 因此该方案不适用于大文件下载, 下到一半会中断. 10ms的时间最多能下到多大的文件没有测试过, 我用来请求存储本博客图片资源的R2的中值CPU时间不到1ms, 如果只是用作图片类型的文件加速, 10ms绰绰有余.</li>
<li>worker的每日请求是十万, 因此该方案只能适用于日访问量在万级以下的小博客. 如果你的日访问量都到万级以上了, 应该不缺那点小钱去买个好点存储和cdn了吧. 为了防止脚本恶意刷请求, 可以配合cloudflare waf里的速率限制规格做一定的限制, 关于cloudflare waf我之前有写过文章介绍. <a href="https://cdn.merack.top/wp-content/uploads/2025/03/83ccfc6c-c70d-a18e-b134-d350e18df4e5.png"><figure class="alignnone size-full wp-image-181"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/83ccfc6c-c70d-a18e-b134-d350e18df4e5.png" alt="" width="808" height="548" data-is-external-image="true"></figure></a></li>
</ol>
<h2>扩展</h2>
<figure class="alignnone size-full wp-image-173">1.本文例子中的使用场景是主要图片访问加速, 那么就会涉及到缓存时间的问题. worker返回的静态资源响应是会带有缓存控制的响应头(Cache-Control)的 <a href="https://cdn.merack.top/wp-content/uploads/2025/03/1821f6d1-320f-e877-4190-88014c4bfae4.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/03/1821f6d1-320f-e877-4190-88014c4bfae4.png" alt="" width="1288" height="389" data-is-external-image="true"></figure></a> 如果你想修改缓存的过期时间, 可以使用worker的cache api来控制, 具体可以参照官方文档: <a href="https://developers.cloudflare.com/workers/runtime-apis/cache/">https://developers.cloudflare.com/workers/runtime-apis/cache/</a> <a href="https://developers.cloudflare.com/workers/reference/how-the-cache-works/">https://developers.cloudflare.com/workers/reference/how-the-cache-works/</a> 2.虽说本文是以加速r2的访问为主题, 当也可用于加速其他的网站, 只要把代码中的 R2_DOMAIN 常量改改就可以做到. 但如果你代理的是某些版权意识比较看重的大公司的站点, 访问量大了他们可能会向cloudflare投诉, 认为你在进行'假冒官网', '欺骗用户'等欺诈行为, 那么cloudflare可能会封禁你的账号.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>无需公网IP: 通过Cloudflare Tunnels实现SSH安全内网穿透</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/wu-xu-gong-wang-ip-tong-guo-cloudflare-tunnelsshi-xian-sshan-quan-nei-wang-chuan-tou.html"/>
        <id>https://blog.merack.top/wu-xu-gong-wang-ip-tong-guo-cloudflare-tunnelsshi-xian-sshan-quan-nei-wang-chuan-tou.html</id>

        <updated>2025-02-28T23:58:53+08:00</updated>
            <summary>
                <![CDATA[
                    大善人Cloudflare在zero trust的网络里提供了一个叫做Tunnels的东西, 通过它可以很轻松地建立多条连接到cloudflare 网络的隧道. Tunnels提供了多种常见协议支持, 比如HTTP, HTTPS, TCP, SSH, RDP,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>大善人Cloudflare在zero trust的网络里提供了一个叫做Tunnels的东西, 通过它可以很轻松地建立多条连接到cloudflare 网络的隧道. Tunnels提供了多种常见协议支持, 比如HTTP, HTTPS, TCP, SSH, RDP, SMB等, 甚至还支持与本地Unix socket文件通信. 本文主要以SSH为例介绍Tunnels的用法(其他协议也大同小异), 可以用于以下场景:</p>
<ul>
<li>在没有公网ip的情况下实现内网穿透SSH连接内网机器</li>
<li>在没有ipv6的环境下连接只有ipv6 ip的主机</li>
<li>远程主机到本地的线路质量很差, 丢包严重造成SSH操作卡顿, 通过tunnels传输SSH来缓解</li>
</ul>
<figure class="alignnone size-full wp-image-142">我这里以第一种场景为例, 内网中的主机是ubuntu 24.04.2 在后文我会把它称作服务端, 远程连接改服务端的pc是win 10, 后文我会称作客户端. 简单的原理图如下: <a href="https://cdn.merack.top/wp-content/uploads/2025/02/5566048f-e95e-5867-88a8-a3e59fcc811b.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/5566048f-e95e-5867-88a8-a3e59fcc811b.png" alt="" width="822" height="404" data-is-external-image="true"></figure></a></p>
<h2>准备工作</h2>
<ul>
<li>一个NS解析在cloudflare的域名</li>
<li>开通zero trust. zero trust的基础功能的免费的, 包括Tunnels, 但是需要绑定一个支付方式开通, 支持visa信用卡或者PayPal, 这里推荐PayPal, 因为PayPal可以绑定国内的银联卡, 无需信用卡.</li>
</ul>
<h2>创建Cloudflare Tunnels</h2>
<figure class="alignnone wp-image-143">登录Cloudflare控制台,然后进入页面左侧的Zero Trust → 网络→ Tunnels → 创建隧道。 隧道类型选择<strong>cloudflared</strong>, 自定义隧道名称（这里我以localSSH为例）。 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/4a47a0db-6e60-853d-edfc-fdf08a5ca249.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/4a47a0db-6e60-853d-edfc-fdf08a5ca249.png" alt="" width="787" height="397" data-is-external-image="true"></figure></a></p>
<h2><a href="https://cdn.merack.top/wp-content/uploads/2025/02/2c280a13-e230-0dea-97f9-5fc4e98f81b4.png"><figure class="alignnone size-full wp-image-144"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/2c280a13-e230-0dea-97f9-5fc4e98f81b4.png" alt="" width="1820" height="645" data-is-external-image="true"></figure></a></h2>
<h2>安装Cloudflared</h2>
<figure class="alignnone size-full wp-image-145">接下来会进入到cloudflared的安装指导页面, cloudflared是隧道的创建和连接客户端, 选择适合服务端的架构, 这里我是ubuntu, 所以选的是Debian, 64bit. 复制知道页面的命令在服务端运行, 这些命令运行后会创建一个开机自启Systemd服务以确保隧道的时刻可用性. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/0e4159f4-3c21-5fb0-5769-c98db8008f07.png"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/0e4159f4-3c21-5fb0-5769-c98db8008f07.png" alt="" width="1301" height="788" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2025/02/db16ac4c-ce4d-7374-ffdb-91102fa0419f.png"><figure class="alignnone size-full wp-image-147"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/db16ac4c-ce4d-7374-ffdb-91102fa0419f.png" alt="" width="868" height="234" data-is-external-image="true"></figure></a> 同时客户端也需要下载cloudflared, 因为前面说过cloudflared同时也是连接器. 可以在同一个页面选择客户端的架构版本下载, 但是不要运行后面的<code>cloudflared service install</code> , 这个命令只有服务端需要运行.也可以在cloudflared的官方仓库下载各个版本的文件: <a href="https://github.com/cloudflare/cloudflared/releases/">https://github.com/cloudflare/cloudflared/releases/</a></p>
<h2>路由隧道</h2>
<figure class="alignnone size-full wp-image-149">点击完成后在这个页面填写协议, ip, 端口, 并为该隧道分配一个子域名用于连接, ip填127.0.0.1, 建议不要填localhost, 可能会不成功. 如果服务器是只有ipv6的情况下填127.0.0.1可能无法连接, 需要填[::1]. 点击完成后cloudflare会自动创建dns记录, 下面就可以测试连接了. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/7f9dcfd8-1d53-75c0-893a-dea0d5b51525.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/7f9dcfd8-1d53-75c0-893a-dea0d5b51525.png" alt="" width="1445" height="585" data-is-external-image="true"></figure></a></p>
<h2><a href="https://cdn.merack.top/wp-content/uploads/2025/02/1ddc25b1-517e-f30b-6182-3b6287aaa0b8.png"><figure class="alignnone size-full wp-image-150"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/1ddc25b1-517e-f30b-6182-3b6287aaa0b8.png" alt="" width="1346" height="45" data-is-external-image="true"></figure></a></h2>
<h2>连接测试</h2>
<p>接下来通过ssh 的ProxyCommand 来让cloudflared把我们的ssh流量转发到隧道中:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="ini">ssh -o ProxyCommand="E:\code\go\bin\cloudflared access ssh --hostname localssh.merack.top" root@localssh.merack.top</pre>
<figure class="alignnone size-full wp-image-148"><a href="https://cdn.merack.top/wp-content/uploads/2025/02/1bd04439-445c-9796-d421-ec63d74df98c.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/1bd04439-445c-9796-d421-ec63d74df98c.png" alt="" width="1257" height="172" data-is-external-image="true"></figure></a> cloudflared 的路径, 用户名, host都换成自己的. 如果嫌每次都要写这么长的命令麻烦, 那么可以将其配置到ssh的配置文件里, 在windows下是 <code>C:\Users\&lt;User&gt;\.ssh\config</code>文件(&lt;User&gt;替换为自己windows上的用户名)</p>
<pre class="EnlighterJSRAW" data-enlighter-language="ini">Host localssh
    User root
    HostName localssh.merack.top
    ProxyCommand E:\code\go\bin\cloudflared access ssh --hostname %h</pre>
<figure class="alignnone size-full wp-image-151"><a href="https://cdn.merack.top/wp-content/uploads/2025/02/cda78973-308e-404f-bbbf-1f6340df4690.png"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/cda78973-308e-404f-bbbf-1f6340df4690.png" alt="" width="1063" height="228" data-is-external-image="true"></figure></a> 这时我们只需要在命令行里输入 <code>ssh localssh</code> 即可 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/14e8bf73-c584-f2f2-08ee-5ebd0ea94099.png"><figure class="alignnone size-full wp-image-152"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/14e8bf73-c584-f2f2-08ee-5ebd0ea94099.png" alt="" width="678" height="175" data-is-external-image="true"></figure></a> 如果是通过公钥文件的方式连接, 只需再加一行 <code>IdentityFile</code> 配置就好:</p>
<pre class="EnlighterJSRAW" data-enlighter-language="ini">Host localssh
    User root
    HostName localssh.merack.top
    ProxyCommand E:\code\go\bin\cloudflared access ssh --hostname %h
    IdentityFile C:\path\to\.ssh\id_remote-ssh</pre>
<h2>扩展</h2>
<p>通过上面的操作已经可以完成通过对内网服务器的ssh连接.此外tunnels还可以与zero trust中的其他功能想配合. 比如通过zero trust中的Access我们可以创建一个在浏览器上进行ssh操作tunnel所连接的内网服务器的网页, 无需写任何代码即可完成.下面进行简单的演示.</p>
<h3>搭建网页版ssh控制台并配置访问策略</h3>
<figure class="alignnone size-full wp-image-153">为了方便演示, 我又在上文的localssh tunnels里配置了一个用于web ssh的公共访问域名: localpanel.merack.top <a href="https://cdn.merack.top/wp-content/uploads/2025/02/136a3288-c45f-b14e-ee91-0e926c4ee165.png"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/136a3288-c45f-b14e-ee91-0e926c4ee165.png" alt="" width="1454" height="430" data-is-external-image="true"></figure></a> 登录Cloudflare控制台,然后进入页面左侧的Zero Trust → Access→ 应用程序→ 创建一个应用程序 应用程序类型选择<strong>自托管</strong>, 公共主机名设置成我们上面的localpanel.merack.top <a href="https://cdn.merack.top/wp-content/uploads/2025/02/2237c155-dabc-96cc-23d0-848898dcb0d1.png"><figure class="alignnone size-full wp-image-154"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/2237c155-dabc-96cc-23d0-848898dcb0d1.png" alt="" width="1744" height="729" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2025/02/40fcceaa-b6f0-3887-8e25-934a00e92838.png"><figure class="alignnone size-full wp-image-155"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/40fcceaa-b6f0-3887-8e25-934a00e92838.png" alt="" width="1433" height="734" data-is-external-image="true"></figure></a> 为了确保只能我们自己访问, 在页面下方我们新建一个访问策略 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/ace8a9e5-5b49-3b04-0331-154f774657c0.png"><figure class="alignnone size-full wp-image-156"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/ace8a9e5-5b49-3b04-0331-154f774657c0.png" alt="" width="1422" height="361" data-is-external-image="true"></figure></a> 访问策略里提供了相当多的规则, 这里我就选择emails, 表示只有规定的邮件地址才能进行验证, 然后在后方输入我们用于验证的email, 可以是多个, 可以不是注册cloudflare的邮箱. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/034dcc47-bbda-f36e-7f5e-ccd61d6a2e28.png"><figure class="alignnone wp-image-157"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/034dcc47-bbda-f36e-7f5e-ccd61d6a2e28.png" alt="" width="803" height="350" data-is-external-image="true"></figure></a> 添加完访问策略后回到应用程序配置页面进行选择 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/f8e328ec-b7a8-8050-cdd4-4c67c8a1b746.png"><figure class="alignnone size-full wp-image-158"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/f8e328ec-b7a8-8050-cdd4-4c67c8a1b746.png" alt="" width="1428" height="323" data-is-external-image="true"></figure></a> 然后一直点击下一步来到高级设置, 打开浏览器呈现 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/cabdd2ab-1c03-d022-c13d-b2790311bb27.png"><figure class="alignnone wp-image-159"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/cabdd2ab-1c03-d022-c13d-b2790311bb27.png" alt="" width="768" height="570" data-is-external-image="true"></figure></a> 这里是设置告诉cloudflare渲染什么样的界面, 有vnc和ssh, 这里我们选择ssh <a href="https://cdn.merack.top/wp-content/uploads/2025/02/4be9ab49-c0ed-6e11-ee61-b982676a78a6.png"><figure class="alignnone size-full wp-image-160"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/4be9ab49-c0ed-6e11-ee61-b982676a78a6.png" alt="" width="801" height="463" data-is-external-image="true"></figure></a> 点击完成后web ssh应用程序就完成了, 这时我们打开为应用程序配置的公共域名localpanel.merack.top就会自动跳转到cloudflare access的验证页面, 这里只有填入我们刚才在访问策略里配置的邮箱地址才能收到cloudflare access的验证码 <a href="https://cdn.merack.top/wp-content/uploads/2025/02/ac556357-4b41-4b28-714a-1a50ca8b7d92.png"><figure class="alignnone wp-image-161"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/ac556357-4b41-4b28-714a-1a50ca8b7d92.png" alt="" width="698" height="607" data-is-external-image="true"></figure></a> 验证完后就可以在浏览器中对内网服务器进行ssh操作了. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/f333e931-b0ea-bd89-514f-34bddadc5db3.png"><figure class="alignnone size-full wp-image-166"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/f333e931-b0ea-bd89-514f-34bddadc5db3.png" alt="" width="728" height="304" data-is-external-image="true"></figure></a> 此外访问策略也可用于上文提到的用ssh 命令行连接的方式, cloudflared会自动在浏览器拉起验证页面</p>
<h3>优选IP加速访问</h3>
<figure class="alignnone size-full wp-image-162">cloudflare tunnels是建立在cloudflare的全球cdn节点上的, 但是cloudflare为ssh连接域名分配的默认泛播ip在国内体验不太好, 为了提升tunnels的连接体验, 我们可以手动修改hosts文件让ssh公共连接域名使用优选的ip节点. cloudflare优选ip网上的教程有很多, 最简单的就是直接ping我的博客域名: www.merack.top, 我的博客使用了SaaS, 这个域名会根据不同运营商返回优选好的ip. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/865245cc-4d43-15d3-9be7-679b98cfade3.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/865245cc-4d43-15d3-9be7-679b98cfade3.png" alt="" width="615" height="176" data-is-external-image="true"></figure></a> 比如windows上的hosts文件在C:\Windows\System32\drivers\etc\hosts, 那么我们可以做如下修改:</p>
<figure class="alignnone size-full wp-image-163"><a href="https://cdn.merack.top/wp-content/uploads/2025/02/6d4f2dc3-4db8-44c6-0d8b-ed0db2497af8.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/6d4f2dc3-4db8-44c6-0d8b-ed0db2497af8.png" alt="" width="606" height="235" data-is-external-image="true"></figure></a></p>
<p>保存好后重新进行连接应该体验会有所改善</p>
<h2>限制</h2>
<figure class="alignnone size-full wp-image-164">因为在服务端ssh连接是通过的本地cloudflared, 所以ssh server看到的连接ip都是来自127.0.0.1, 那么像 <a href="https://github.com/fail2ban/fail2ban">fail2ban</a> 这种基于连接ip的工具可能会失去其效果. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/5d828a3b-88e1-07a7-04e9-ca18e57be167.png"><img  src="https://cdn.merack.top/wp-content/uploads/2025/02/5d828a3b-88e1-07a7-04e9-ca18e57be167.png" alt="" width="605" height="143" data-is-external-image="true"></figure></a> 但是可以通过配合zero trust里的访问策略来对密码爆破做一定限制, 比如可以配置一个与前文提到的网页版ssh的同款访问策略, 那么在你使用ssh命令连接时, cloudflared会自动拉起浏览器打开cloudflare access验证窗口, 通过验证后才能进行后续的操作. <a href="https://cdn.merack.top/wp-content/uploads/2025/02/6c86edfb-c156-2ff2-26c9-de606c714f19.png"><figure class="alignnone size-full wp-image-165"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2025/02/6c86edfb-c156-2ff2-26c9-de606c714f19.png" alt="" width="1220" height="265" data-is-external-image="true"></figure></a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>Windows+MinGW-w64+lsp-clangd+VSCode/sublime 配置简单c/cpp 单文件学习环境简要记录</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/windowsmingw-w64lsp-clangdvscodesublime-pei-zhi-jian-dan-ccpp-dan-wen-jian-xue-xi-huan-jing-jian-yao-ji-lu.html"/>
        <id>https://blog.merack.top/windowsmingw-w64lsp-clangdvscodesublime-pei-zhi-jian-dan-ccpp-dan-wen-jian-xue-xi-huan-jing-jian-yao-ji-lu.html</id>

        <updated>2024-12-21T20:19:21+08:00</updated>
            <summary>
                <![CDATA[
                    有些时候我只想快速打开或者编写运行一个简单的c/cpp文件来快速验证想法, 比如说在做LeetCode上面的算法题时, 往往只需一个简单的单文件就可以写完所有逻辑. 我希望可以在编辑器里写代码时提供语法高亮, 智能提示, 错误检测和修改建议等功能, 同时还可以很方便地编译运行查看结果. 当前几乎所有的IDE都提供这些功能, 但是无论有多少个cpp文件, 里面的代码有多简单,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>有些时候我只想快速打开或者编写运行一个简单的c/cpp文件来快速验证想法, 比如说在做LeetCode上面的算法题时, 往往只需一个简单的单文件就可以写完所有逻辑.</p>
<p>我希望可以在编辑器里写代码时提供语法高亮, 智能提示, 错误检测和修改建议等功能, 同时还可以很方便地编译运行查看结果. 当前几乎所有的IDE都提供这些功能, 但是无论有多少个cpp文件, 里面的代码有多简单, 他们都要求新建一个工程项目来放置cpp文件, 对于我前面提到的场景有点"杀鸡焉用牛刀了".</p>
<figure class="alignnone size-full wp-image-123">后来我发现了<a href="https://microsoft.github.io/language-server-protocol/">LSP</a>和<a href="https://github.com/llvm/llvm-project/tree/main/clang-tools-extra/clangd">clangd</a>, 提供IDE的基本编码功能且轻量快速, 也支持单文件, 很符合我的需求. 安装clangd插件很简单不做介绍, 这里主要讲一下目前clangd在Windows上的一些问题: 目前clangd在Windows上只能自动识别MSVC的头文件, 但是如果没有安装MSVC而是用MinGW的GCC的话, 会报'vector file not found'等找不到头文件的错误. <a href="https://cdn.merack.top/wp-content/uploads/2024/12/95d69c25-3c8a-2874-6a45-33a745a76d9f.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/95d69c25-3c8a-2874-6a45-33a745a76d9f.png" alt="" width="814" height="511" data-wp-editing="1" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2024/12/03250458-cec3-3e99-0b09-27f0da1c3784.png"><figure class="alignnone size-full wp-image-124"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/03250458-cec3-3e99-0b09-27f0da1c3784.png" alt="" width="705" height="705" data-is-external-image="true"></figure></a> 同样在Sublime Text上也会有类似的提示 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/a3ea97d6-ad99-c593-e662-bec24e7849fc.png"><figure class="alignnone size-full wp-image-125"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/a3ea97d6-ad99-c593-e662-bec24e7849fc.png" alt="" width="834" height="495" data-is-external-image="true"></figure></a> 上述问题通过Visual Studio Installer 安装MSVC就可以解决. 但是如果嫌msvc太大而只想用mingw呢? VSCode的clangd插件的GitHub仓库里正好有人提到了相关的issue: <a href="https://github.com/clangd/vscode-clangd/issues/478">https://github.com/clangd/vscode-clangd/issues/478</a> . 根据issue里提到的方案, 只要加上<code>--target x86_64-w64-windows-gnu</code> 这个flag就可以了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/780fdbd7-0012-2874-6380-8f298ee479c8.png"><figure class="alignnone size-full wp-image-126"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/780fdbd7-0012-2874-6380-8f298ee479c8.png" alt="" width="1163" height="368" data-is-external-image="true"></figure></a> 下面分别记录了VSCode和Sublime Text如何添加这个flag来解决在clangd在mingw下找不到头文件的问题以及分别通过其他插件快速编译运行cpp单文件</p>
<h2>1. vscode + <a href="https://marketplace.visualstudio.com/items?itemName=llvm-vs-code-extensions.vscode-clangd">clangd</a> + <a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner">Code Runner</a></h2>
<ol>
<li>在设置里搜索<code>@ext:llvm-vs-code-extensions.vscode-clangd</code></li>
<li>在Fallback Flags里添加两个item, 一个是<code>--target</code>, 一个是<code>x86_64-w64-windows-gnu</code>, 如下图 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/73c3768f-f408-050a-eea1-90dc100e829a.png"><figure class="alignnone size-full wp-image-127"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/73c3768f-f408-050a-eea1-90dc100e829a.png" alt="" width="961" height="348" data-is-external-image="true"></figure></a></li>
</ol>
<figure class="alignnone size-full wp-image-128">这时重开VSCode就会发现clangd可以找到mingw的头文件了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/136d4c84-0290-0412-b66a-8579e3a47880.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/136d4c84-0290-0412-b66a-8579e3a47880.png" alt="" width="875" height="505" data-is-external-image="true"></figure></a> 然后再安装 Code Runner 插件就可以通过右键-&gt;Run Code来直接运行cpp单文件了 <a href="https://www.merack.top/wp-content/uploads/2024/11/screenshot_2024_0818_09-33-42.png"><figure class="alignnone size-full wp-image-78"><img loading="lazy"  src="https://www.merack.top/wp-content/uploads/2024/11/screenshot_2024_0818_09-33-42.png" alt="" width="1390" height="132" data-is-external-image="true"></figure></a></p>
<h2>2. sublime text+ <a href="https://github.com/sublimelsp/LSP-clangd">LSP-clangd</a> + <a href="https://github.com/Jatana/FastOlympicCoding">FastOlympicCoding</a></h2>
<ol>
<li>以此通过上方菜单栏的Preferences-&gt;Package Settings-&gt;LSP-&gt;Servers-&gt;LSP-cland打开cland的配置文件</li>
<li>将initializationOptions这一个字段的内容复制到自定义配置里并且修改<code>fallbackFlags</code> 这一个字段:
<pre>"fallbackFlags": ["-target", "x86_64-w64-windows-gnu"],</pre>
如图所示: <a href="https://cdn.merack.top/wp-content/uploads/2024/12/9a4890d7-c650-cd8a-e5a3-0cbc785da01b.png"><figure class="alignnone size-full wp-image-129"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/9a4890d7-c650-cd8a-e5a3-0cbc785da01b.png" alt="" width="856" height="441" data-is-external-image="true"></figure></a></li>
</ol>
<figure class="alignnone size-full wp-image-130">这时重开Sublime Text就会发现clangd可以找到mingw的头文件了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/f9ce493b-9c15-1788-69a5-77f1de766aea.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/f9ce493b-9c15-1788-69a5-77f1de766aea.png" alt="" width="1175" height="470" data-is-external-image="true"></figure></a> 然后再安装 FastOlympicCoding 插件就可以通过ctrl+alt+b来直接运行cpp单文件了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/8fa642d2-d406-293d-911f-a15b54f36ee3.png"><figure class="alignnone size-full wp-image-131"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/8fa642d2-d406-293d-911f-a15b54f36ee3.png" alt="" width="614" height="285" data-is-external-image="true"></figure></a></p>
<p>同时记得要在FastOlympicCoding 配置文件里设置<code>lint_enabled</code>和<code>cpp_complete_enabled</code>为<code>false</code>, 不然可能会与clangd插件冲突</p>
<h2>3.不足</h2>
<p>最大的不足就是没有debug功能, 要看某些变量在运行过程的变化只能通过类似printf来输出. 要是遇到了需要debug的情况, 还是推荐使用IDE来新建项目.另外VSCode的<a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">官方cpp插件</a>是带有简单的调试功能的, 但是性能会比clangd差很多, 各有取舍吧.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>WordPress 安全防护简单记录</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/wordpress-an-quan-fang-hu-jian-dan-ji-lu.html"/>
        <id>https://blog.merack.top/wordpress-an-quan-fang-hu-jian-dan-ji-lu.html</id>

        <updated>2024-12-03T16:08:29+08:00</updated>
            <summary>
                <![CDATA[
                    WordPress网站一直是被恶意程序扫描和密码爆破的重灾区, 每次一查Nginx日志都能看到一大堆对本博客的密码撞库攻击和敏感路径扫描 在几年前由于用了弱密码还真被爆破成功, 虽然很快我就改了密码. 但由于不确定是否有被留下暗桩, 索性重装了一遍系统, 都是血泪教训. 随着跑在服务器上的业务越来越多, 重装的代价已经是非常大了. 所以从那次事故以后我便开始留意WordPress的安全问题,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <figure class="alignnone size-full wp-image-90">WordPress网站一直是被恶意程序扫描和密码爆破的重灾区, 每次一查Nginx日志都能看到一大堆对本博客的密码撞库攻击和敏感路径扫描 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/9b08f457-b2a4-5f21-d949-5a2b0acc872d.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/9b08f457-b2a4-5f21-d949-5a2b0acc872d.png" alt="" width="788" height="323" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2024/12/5486867a-cf9d-feff-1934-2d0d6466e649.png"><figure class="alignnone size-full wp-image-86"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/5486867a-cf9d-feff-1934-2d0d6466e649.png" alt="" width="1908" height="796" data-is-external-image="true"></figure></a> 在几年前由于用了弱密码还真被爆破成功, 虽然很快我就改了密码. 但由于不确定是否有被留下暗桩, 索性重装了一遍系统, 都是血泪教训. 随着跑在服务器上的业务越来越多, 重装的代价已经是非常大了. 所以从那次事故以后我便开始留意WordPress的安全问题, 下面是我这些年来做过的配置的一些简单记录.</p>
<h2>1. WordPress插件篇</h2>
<figure class="alignnone size-full wp-image-87">WordPress推荐使用插件 <a href="https://cn.wordpress.org/plugins/login-lockdown/">Login Lockdow</a> 的登录验证码功能, 类型直接选择built-in Captcha即刻, 亲测可以抵挡99%的密码撞库攻击 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/76a96c65-1ce4-0d1a-246e-195ccd5196d2.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/76a96c65-1ce4-0d1a-246e-195ccd5196d2.png" alt="" width="1465" height="688" data-is-external-image="true"></figure></a> 可以看到登录失败的全是给验证码拦截了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/728b31a3-18d1-60cc-e079-6f9595280706.png"><figure class="alignnone size-full wp-image-88"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/728b31a3-18d1-60cc-e079-6f9595280706.png" alt="" width="1504" height="598" data-is-external-image="true"></figure></a> WordPress上还有很多更加全面的安全插件, 但过多或者过于复杂的插件会减慢站点速度, 特别是我现在用这个小鸡性能一般, 因此我会更倾向在下面几个方面来做后续的防护.</p>
<h2>2.Nginx篇</h2>
<p>在Nginx上我主要是对WordPress中的一些敏感路径进行访问限制, 主要配置如下</p>
<div>
<pre>   #禁止以. 开头的文件访问, 如.htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
    }

    #禁止访问路径 /xmlrpc.php
    location ~ /xmlrpc.php$ {
        deny all;
    }

    #禁止访问路径 /wp-json/wp/v2/users
    location ~ ^/wp-json/wp/v2/users {
        deny all;
    }

    #禁止访问路径 /wp-includes/wlwmanifest.xml
    location ~ ^/wp-includes/wlwmanifest.xml {
        deny all;
    }

    #禁止直接访问uploads和files文件夹下的php文件
    location ~ /(?:uploads|files)/.*\.php$ {
        deny all;
    }</pre>
</div>
<div>其中<code>/xmlrpc.php</code>是除了/wp-login.php 之外的另一种可以被用来验证后台密码的方式, 因此也经常会被利用来做密码撞库;</div>
<div><code>/wp-json/wp/v2/users</code> 会返回后台管理员的登录用户名, 建议禁止并且不要将管理员登录名设置成Admin这种常见的形式;</div>
<div><code>/wp-includes/wlwmanifest.xml</code> 是我在别的博客看到的, 但是新版WordPress好像移除了这个文件, 反正我用的版本目录下没有, 关于这个文件的限制可以不写, 最重要的还是前面两个路径.</div>
<h2>3.CDN篇</h2>
<p>如果你的网站套了CDN的话, 可以通过CDN里提供的一些配置来相关的防护. 不同CDN提供商的功能都有所不同, 这里我主要记录我正在用的两家CDN的配置.</p>
<h3>3.1 又拍云</h3>
<figure class="alignnone size-full wp-image-89">在CDN的访问控制选项下又拍云提供了网站安全防护的基本功能, 我主要用到的是 IP 访问限制 和 WAF保护 这两个. ip访问限制可以对敏感路径设置一个阈值, 如果某个ip在短时间内对该路径的请求超过该阈值, 那么它可能是在做密码撞库, 这时就会禁止他的访问请求. 我的配置如下 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/b671f607-2ba8-fac4-b8a3-6bfcadeb8430.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/b671f607-2ba8-fac4-b8a3-6bfcadeb8430.png" alt="" width="1373" height="392" data-is-external-image="true"></figure></a> 我的阈值设置成20次/分, 封禁时间是8400秒, 可以多观察网站的访问日志, 根据自己的情况来设置. 建议在上方的ip白名单中加入自己的ip防止误杀.</p>
<p>此外, 又拍云还提供了 WAF保护, 但是只有一个功能开关, 不能配置规则, 也没有分析统计, 在这方面不如Cloudflare. 这项配置没什么好说的, 打开就好.</p>
<h3>3.2 Cloudflare</h3>
<p>相较于又拍云, Cloudflare提供的安全防护就全面了很多. 提供了WAF, DDoS防护, 页面规则等一系列功能, 其中WAF是可以自己写规则的, 可以说是非常丰富了. 我在Cloudflare上的安全配置基本都是在WAF里, 下面是我写的一些规则:</p>
<p><strong>第一条</strong>是专门为WordPress写的, 一是阻止WordPress的敏感路径扫描,二是阻止规定以外的ip进行登录请求</p>
<pre>(http.host wildcard "merack.top") and ((cf.waf.credential_check.password_leaked) or (http.request.uri.path wildcard r"/wp-login.php" and (ip.geoip.country ne "CN" and (not ip.src in {192.168.1.1}))) or ((http.request.uri.path wildcard r"/xmlrpc.php") or (http.request.uri.path wildcard r"/wp-json/wp/v2/users"))) 
</pre>
<p><code>http.host wildcard "merack.top"</code> 表示只匹配对merack.top的访问;</p>
<p><code>cf.waf.credential_check.password_leaked</code> 表示cf会检测登录请求中的密码是否是已知的通过各种信息泄露事件泄露过的密码, 具体描述可以看Cloudflare官方的这篇文档, 不少自动程序除了尝试弱密码组合之外还会尝试泄露过的数据库中的密码; http.request.uri.path wildcard r"/wp-login.php" 表示匹配访问路径是/wp-login.php的请求;</p>
<p><code>ip.geoip.country ne "CN" and (not ip.src in {192.168.1.1})</code> 表示匹配请求ip不是来自中国的并且不在受信任ip里的(这里以192.168.1.1)为例, 建议将正在托管WordPress的服务器ip加入到列表中, 因为通过Nginx日志观察, WordPress会定时请求自身来触发一些定时任务(比如/wp-login.php), 如果你的服务器ip恰好不在中国内又不在信任ip列表中, 那么可能会被拦截, 也可以在这条waf规则前再写一条白名单规则放行; </p>
<p><code>(http.request.uri.path wildcard r"/xmlrpc.php") or (http.request.uri.path wildcard r"/wp-json/wp/v2/users")</code> 表示匹配这两个敏感路径的请求, 这两个路径在前面已经做过介绍.</p>
<p>最后将这几个匹配条件按照相应的逻辑通过and 和 or 连接起来, 大概如下图</p>
<figure class="alignnone size-full wp-image-91"><a href="https://cdn.merack.top/wp-content/uploads/2024/12/e024a11d-1bc1-49c0-2ce5-b9c820a969a6.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/e024a11d-1bc1-49c0-2ce5-b9c820a969a6.png" alt="" width="1345" height="680" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 效果还是很可观的 </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/2b48a6ef-e98f-d323-caa8-b18f104aa1c3.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><figure class="alignnone size-full wp-image-92"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/2b48a6ef-e98f-d323-caa8-b18f104aa1c3.png" alt="" width="1252" height="724" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span></p>
<figure class="alignnone size-full wp-image-94"><strong style="font-family: var(--editor-font-family); font-size: inherit;">第二条</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">规则是对域名下的所有站点都生效的, 主要是防止除了已知的搜索引擎的蜘蛛机器人之外的其他自动程序和高风险IP对站点进行扫描, 这里的逻辑比较简单, 直接用可视化的表达式生成器即可: </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/3707771e-3617-5d48-49a0-1bb4679e2e2b.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/3707771e-3617-5d48-49a0-1bb4679e2e2b.png" alt="" width="1329" height="774" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 与第一条规则不同, 这里没有指定 </span><code style="font-weight: var(--font-weight-normal);">http.host wildcard "merack.top"</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> , 所以该条规则对域名下的所有子域名都有效.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">图中的威胁分数是Cloudflare对ip的恶意程度进行的一个评估, 请求的威胁评分值为0到100, 其中0表示低风险. 大于10的值可能表示垃圾邮件发送者或机器人, 大于40的值表示互联网上的不良行为者, 很少有超过60的值. 详细描述可以参照官方的</span><a href="https://developers.cloudflare.com/ruleset-engine/rules-language/fields/dynamic-fields/#cfthreat_score" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">这个文档</a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">.官方推荐设置大于10触发托管质询, 大于50直接block.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">下面的选择操作-&gt;托管质询 是指Cloudflare会生成一个用于人机验证的验证页面, 通过验证才可以继续访问.</span></p>
<figure class="alignnone size-full wp-image-95"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">最后的规则总览 </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/8dfc073c-61b8-c22e-5218-f564ac2b3580.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/8dfc073c-61b8-c22e-5218-f564ac2b3580.png" alt="" width="1341" height="573" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 执行质询类的操作都会自动计算一个CRS值, 这个值可以体现质询规则的有效性, 越低表示误杀的真实用户越少, 则效果越好.<br>如果在CSR为0的同时Nginx日志中还有大量的路径扫描请求记录, 那么可以尝试降低威胁分数的值, 也有可能是这些IP未被收录在Cloudflare的数据库中所以不触发质询, 总之这个要慢慢调, 防扫描我还在学习中. 这条规则我也是刚写等待后面的测试.</span></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用又拍云加速WordPress简要配置, 解决后台样式失效, 后台功能点击无反应问题</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shi-yong-you-pai-yun-jia-su-wordpresshou-tai-yang-shi-shi-xiao-hou-tai-cai-dan-gong-neng-dian-ji-wu-fan-ying-jie-jue-fang-fa-ji-jian-yao-pei-zhi.html"/>
        <id>https://blog.merack.top/shi-yong-you-pai-yun-jia-su-wordpresshou-tai-yang-shi-shi-xiao-hou-tai-cai-dan-gong-neng-dian-ji-wu-fan-ying-jie-jue-fang-fa-ji-jian-yao-pei-zhi.html</id>

        <updated>2024-06-19T20:48:00+08:00</updated>
            <summary>
                <![CDATA[
                    之前写了一篇又拍云加速静态网站GitHub Pages的文章, 现在这篇文章就来介绍一下又拍云加速动态网站WordPress的配置以及遇到的一些坑. 又拍云为开发者提供每月免费额度, 可以到下面的链接注册申请: 服务的创建, CNAME绑定和一些基本的配置可以参考我的上一篇文章, 但是有一些CDN的配置要做出调整, 否则会造成网站异常, 主要是在后台页面.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>之前写了一篇<a href="https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html" target="_blank" rel="noopener noreferrer">又拍云加速静态网站GitHub Pages</a>的文章, 现在这篇文章就来介绍一下又拍云加速动态网站WordPress的配置以及遇到的一些坑. 又拍云为开发者提供每月免费额度, 可以到下面的链接注册申请: </p>
<ol>
<li>又拍云账号: <a href="https://console.upyun.com/register/?invite=SJxy8d1Sw" target="_blank" rel="noopener">点我注册</a></li>
<li>注册完毕后可以到 <a href="https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral" target="_blank" rel="noopener">又拍云联盟</a>页面按要求申请开发者每月免费配额</li>
</ol>
<p>服务的创建, CNAME绑定和一些基本的配置可以参考我的上一篇文章, 但是有一些CDN的配置要做出调整, 否则会造成网站异常, 主要是在后台页面. 下面是我是用过程中遇到的一些坑.</p>
<h2>1. 后台菜单功能点击无反应, 功能异常</h2>
<figure class="alignnone size-full wp-image-58">原因是又拍云默认规则是忽略URL '?' 后面的的参数. 但是如下图所示, WordPress后台功能基本上都是需要通过URL传进来的参数才能正常工作的 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001806.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001806.png" alt="" width="699" height="437" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001941.png"><figure class="alignnone size-full wp-image-59"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001941.png" alt="" width="761" height="500" data-is-external-image="true"></figure></a> 解决方法是在缓存控制选项卡下的参数跟随中选择全程跟随, 这样流量流经CDN时就不会去掉后面的参数, 源站就能正确接受到前端发过来的参数 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-08-28.png"><figure class="alignnone size-full wp-image-61"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-08-28.png" alt="" width="1411" height="348" data-is-external-image="true"></figure></a></p>
<h2>2. 后台样式失效</h2>
<p>如果你的WordPress站主页正常但是后台页面样式丢失, 并且控制台报了很多/wp-admin/load-scripts.php 加载的js的错误, 那么就要去调整又拍云的缓存规则. 虽说又拍云自己声称可以自动分辨处理动静态资源, 同时加速动静态请求, 但目前来看又拍云对于WordPress 的load-scripts.php动态加载的js的处理还存在问题. 为了防止动态请求出现奇奇怪怪的问题, 我们直接将以下两个包含WordPress核心代码文件的目录加入到缓存控制-&gt;缓存配置的 <span style="color: #f1c40f;"><strong>不缓存规则</strong></span> 中</p>
<pre>/wp-includes/*
/wp-admin/*</pre>
<figure class="alignnone size-full wp-image-60"><a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-33-08.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-33-08.png" alt="" width="1366" height="473" data-is-external-image="true"></figure></a> 处理完成后强烈建议在CDN服务管理页点击一次全站刷新, 让CDN节点上旧的缓存过期 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-39-08.png"><figure class="alignnone size-full wp-image-62"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-39-08.png" alt="" width="1304" height="420" data-is-external-image="true"></figure></a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>解决Ubuntu安装MySQL8.0后 数据库root设置密码无效, root无需密码或密码错误都可登录</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/ubuntu2404an-zhuang-mysql80yu-dao-de-yi-xie-wen-ti-shu-ju-ku-rootzhang-hu-she-zhi-mi-ma-wu-xiao-rootzhang-hu-wu-xu-mi-ma-huo-mi-ma-cuo-wu-du-ke-deng-lu-yi-ji-qi-ta-cao-zuo-ji-lu.html"/>
        <id>https://blog.merack.top/ubuntu2404an-zhuang-mysql80yu-dao-de-yi-xie-wen-ti-shu-ju-ku-rootzhang-hu-she-zhi-mi-ma-wu-xiao-rootzhang-hu-wu-xu-mi-ma-huo-mi-ma-cuo-wu-du-ke-deng-lu-yi-ji-qi-ta-cao-zuo-ji-lu.html</id>
            <category term="Linux"/>

        <updated>2024-06-16T23:06:31+08:00</updated>
            <summary>
                <![CDATA[
                    Ubuntu24.04使用apt-get安装MySQL8.0后发现数据库的root账户竟然不用密码也能登录尝试随便输入一个密码也能登录, 使用 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new passwd'; 语句修改密码后问题依然存在,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Ubuntu24.04使用apt-get安装MySQL8.0后发现数据库的root账户竟然不用密码也能登录<figure class="alignnone size-full wp-image-41"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-04-26.png" alt="" width="708" height="279" data-is-external-image="true"></figure>尝试随便输入一个密码也能登录, 使用 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new passwd'; 语句修改密码后问题依然存在, 以前使用MySQL5.7并未发现相关的问题.</p>
<h3>原因</h3>
<p>通过查找资料发现是MySQL8.0开始更改了root账户的默认密码验证插件为<a href="https://dev.mysql.com/doc/mysql-secure-deployment-guide/8.0/en/secure-deployment-configure-authentication.html">auth_socket</a>导致的, 可以通过一下命令查看数据库中的用户使用的身份验证插件:</p>
<pre>SELECT user, host, plugin FROM mysql.user;</pre>
<figure class="alignnone size-full wp-image-43"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-32-04.png" alt="" width="535" height="254" data-is-external-image="true"></figure><br>可以看到root使用的身份验证插件是auth_socket, 其他用户默认是caching_sha2_password. auth_socket这个插件是通过Unix socket文件来进行身份验证, 简单来说就是你在Linux系统的登录名为root, 那么当登录数据库的root账号时数据库会与系统进行socket通信, 发现要登录的用户名是相同的, 那么就会允许这次登录, 详细信息可以看MySQL的官方文档: <a href="https://dev.mysql.com/doc/mysql-secure-deployment-guide/8.0/en/secure-deployment-configure-authentication.html">auth_socket</a> 以及这篇文章: <a href="https://segmentfault.com/a/1190000039860881">https://segmentfault.com/a/1190000039860881</a><br>MySQL8.0以上将其作为root的默认身份插件有一定的道理, 首先, Unix socket通信只能是在本机的程序之间进行, 不会通过TCP/IP网络栈, 不用当心来自外部的爆破;  二是Linux本身的身份验证已经很完善, 用户如果能以root登录系统, 那么无论使用何种插件都能被轻易地修改密码.</p>
<h3>更改身份验证插件</h3>
<p>如果想用账户密码方式的身份验证, 可以通过以下语句更改, WITH 后面是身份验证插件名称, BY 后面是登录密码:</p>
<pre>ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'new password';</pre>
<figure class="alignnone size-full wp-image-43"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-53-04.png" alt="" width="797" height="323" data-is-external-image="true"></figure>
<p>可以看到root的身份验证插件已经改为caching_sha2_password<br>改完以后需要提供正确的密码才能登录<figure class="alignnone size-full wp-image-44"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-56-15.png" alt="" width="768" height="98" data-is-external-image="true"></figure>需要注意的是, 有一些文章WITH 后面跟的是mysql_native_password, 但是根据官方文档: <a href="https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html">https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html</a> 中的描述, mysql_native_password插件会在MySQL 8.0.34中弃用并且在后续版本中删除, 官方更推荐caching_sha2_password, 具有更好的安全性.</p>
<h3>mysql_secure_installation</h3>
<p>实际上, 根据MySQL官方文档"安装后的设置与测试"(<a href="https://dev.mysql.com/doc/refman/8.0/en/postinstallation.html">Postinstallation Setup and Testing</a> )一节中的<a href="https://dev.mysql.com/doc/refman/8.0/en/default-privileges.html">Securing the Initial MySQL Account</a> 小节里提到了mysql_secure_installation这个程序, 他随MySQL一同安装, 用于对MySQL安装后, 上线生产环境前的安全初始化, 其中主要包括以下功能:<br>1. 为root账户设置密码;<br>2. 禁止root账户远程访问;<br>3. 删除匿名账户;<br>4. 删除test数据库;</p>
<p>如果你安装完MySQL后运行这个程序, 就能发现问题所在, 程序提示root用户正在使用auth_socket, 因此跳过密码设置, 所以平时还是要多看看文档^_^<figure class="alignnone size-full wp-image-45"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_22-45-39.png" alt="" width="1023" height="320" data-is-external-image="true"></figure>
<h3>内存优化</h3>
<p>如果你的主机内存很小, 那么建议修改MySQL配置文件, 在 [mysqld] 下添加:<br><code>performance_schema = off</code><br>亲测可以减少100多M的内存, <code>performance_schema</code> 是用来记录MySQL查询性能相关的记录, 用于给数据库管理员做性能分析的, 如果你没有这方面的需求, 那么可以关闭它.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用又拍云加速GitHub Pages简要配置</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html"/>
        <id>https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html</id>

        <updated>2024-06-07T20:56:06+08:00</updated>
            <summary>
                <![CDATA[
                    <p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>

<h2 data-heading="必备条件">必备条件</h2>
<ol>
<li>已经备案的域名(国内的CDN厂商基本都要求)</li>
<li>又拍云账号: <a href="https://console.upyun.com/register/?invite=SJxy8d1Sw" target="_blank" rel="noopener noreferrer">点我注册</a>, 注册完毕后可以到 <a href="https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral" target="_blank" rel="noopener noreferrer">又拍云联盟</a>页面按要求申请开发者每月免费配额, 一般在自己网站挂一个又拍云的logo然后提交申请就可以了.需要注意的是, 当前你的网站是要有一定内容的不然不会通过(实测我的博客就发了三篇文章就申请通过了).</li>
</ol>
<h2 data-heading="简要配置">简要配置</h2>
<h3 data-heading="GitHub Pages设置">GitHub Pages设置</h3>
<p>静态网站如何生成不在本文讨论范围, 这里只讨论自定义域名相关话题. 在托管静态网站的GitHub仓库中点击Settings-&gt;Pages-&gt;Custom domain 中配置你已经备案的域名, 比如我这里是blog.merack.top. 需要注意的是如果你的page不是由GitHub Actions workflow生成的, 那么需要确认仓库根目录中有一个CNAME文件, 里面存储的是你自定义域名, 具体请看GitHub Pages的文档: <a rel="noopener" class="external-link" href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors" target="_blank">https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors</a></p>
<h3 data-heading="又拍云设置">又拍云设置</h3>
<h4 data-heading="创建服务">创建服务</h4>
<p>在又拍云创建CDN服务, 加速域名填你已备案的自定义域名, 应用场景选网页图片, 实际上根据<a data-tooltip-position="top" aria-label="https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f" rel="noopener" class="external-link" href="https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f" target="_blank">又拍云的文档</a>目前应用场景只是一个标示, 功能是一样的, 随便选也行. 创建完成后又拍云会给出一个CNAME域名, 在域名域名解析中为域名创建一个CNAME记录, 记录值是又拍云会给出的这个CNAME域名.</p>
<div><figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717757460.png" alt="" width="1228" height="292" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717757460-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717757460-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757460-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757460-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717757460-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717757460-2xl.png 1920w"></figure></div>
<p>回源协议选协议跟随,源站证书校验我这里没开, 源站地址根据<a data-tooltip-position="top" aria-label="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" rel="noopener" class="external-link" href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank">GitHub Pages的文档</a>填以下IP(建议配置的时候去文档里找, 防止GitHub那边更新IP), 然后点击确定创建服务.</p>
<p><code>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</code></p>
<figure class="post__image"><img  src="https://blog.merack.top/media/posts/8/1717758315.png" alt="" width="944" height="426" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717758315-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717758315-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717758315-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717758315-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717758315-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717758315-2xl.png 1920w"></figure><br><figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717757656.png" alt="" width="824" height="545" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717757656-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717757656-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757656-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757656-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717757656-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717757656-2xl.png 1920w"></figure>
<h4>CDN功能设置</h4>
<p>接着进入到CDN功能配置.</p>
<h5>回源管理</h5>
<p>在回源管理中回源Host中填入你自己的自定义域名,  比如我这里是blog.merack.top, 因为源站设置中的IP托管了成千上万个GitHub Pages, 需要回源Host中的域名才能找到你的.</p>
<figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717760653.png" alt="" width="1280" height="271" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717760653-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717760653-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717760653-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717760653-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717760653-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717760653-2xl.png 1920w"></figure>
<p><strong>注意!!!</strong>: 如果你在上面的步骤中已经为GitHub仓库配置了自定义域名, 这里的回源Host填上的就是该域名, 而不是xxx.github.io, 否则会造成too many redirects 的错误.</p>
<h5>验证</h5>
<p>到这里就可以就可以验证是否配置成功了, 直接ping 或者dig我们的域名, 如果返回的是nm.aicdn.com, 那么就表示我们成功解析到了CDN,访问网站检查是否有其他问题</p>
<figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717761171.png" alt="" width="576" height="252" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717761171-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717761171-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717761171-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717761171-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717761171-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717761171-2xl.png 1920w"></figure>
<p>更进一步, 可以使用一些在线ping网站来检测CDN是否根据不同地区就近返回: <a href="https://www.itdog.cn/ping">https://www.itdog.cn/ping</a></p>
<h5>HTTPS</h5>
<p>此外强烈建议配置下https, 又拍云申购SSL证书中选择Let's Encrypt是免费的, 又拍云会自动帮你续期.</p>
<h5>其他配置与注意事项</h5>
<ol>
<li>其他的配置按需求点点就行, 需要注意的是我看到一些资料说HTTP 302 调度这个功能可能会造成一些问题, 建议不开这个. </li>
<li>如果要开源站资源迁移这个功能, 需要配合缓存配置中将资源缓存时间配置为24小时以上才会触发迁移. 如果要验证缓存时间可以通过浏览器的开发者工具检查响应头的Cache-Control字段, 具体可以看<a href="https://docs.upyun.com/cdn/guide/#_6">又拍云的这个文档</a> (https://docs.upyun.com/cdn/guide/#_6). 不过, 除非你了解<a href="https://help.upyun.com/knowledge-base/cdn-source-resource-move/">源站资源迁移的访问机制</a> (https://help.upyun.com/knowledge-base/cdn-source-resource-move/), 否则不建议开启, 会对资源更新造成一些问题.</li>
<li>如果你的域名挂靠在Cloudflare, 请勿给根域名(即不带任何前缀, 主机记录为@的那个域名 )做CNAME解析(例如, 不能为merack.top添加又拍云的CNAME记录), 因为根据<a href="https://datatracker.ietf.org/doc/html/rfc1912">RFC1912</a>，域名根域名不得存在 CNAME 记录，根域名的 CNAME 记录会与域名的 MX 邮箱记录、TXT 域名验证记录发生冲突, Cloudflare会将该CNAME记录展平(<a href="https://developers.cloudflare.com/dns/cname-flattening/">CNAME flattening</a>), 指向的是又拍云在国外的某个节点, 无论国内国外访问都是请求的这个节点的资源, 那么这就失去了CDN的功能.<br><figure class="alignnone size-full wp-image-40"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0605_11-58-14.png" alt="" width="1238" height="150" data-is-external-image="true"></figure></li>
</ol>
<h2>结语</h2>
<p>到此又拍云CDN加速GitHub Pages就配置完成了, 本文只是我配置时的一些简要记录, 仅供参考. 如果遇到问题可以通过邮件与我交流. 像其他的一些静态网站加速, 例如GitLab, Vercel, Netlify, Cloudflare Pages, 思路应该也大致相同, 但还是要根据不同平台调整.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>新的开始</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/xin-de-kai-shi.html"/>
        <id>https://blog.merack.top/xin-de-kai-shi.html</id>

        <updated>2024-04-05T17:10:00+08:00</updated>
            <summary>
                <![CDATA[
                    最近托管在某云服务商上的机器到期了, 在做数据迁移时顺便回看了之前发的博客, 发现一些文章写得很有问题: 1. 我最早是从17年开始写文章, 当时写了好几篇分享破解软件的, 那些文章涉及版权问题而且里面的软件都有时效性, 现在基本已经失效了. 2. 有些文章是在自学编程语言和一些框架时写的,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>最近托管在某云服务商上的机器到期了, 在做数据迁移时顺便回看了之前发的博客, 发现一些文章写得很有问题:<br><br>1. 我最早是从17年开始写文章, 当时写了好几篇分享破解软件的, 那些文章涉及版权问题而且里面的软件都有时效性, 现在基本已经失效了.<br><br>2. 有些文章是在自学编程语言和一些框架时写的, 只是将官方文档里有的内容又说一遍, 没什么营养. 当时还没学会去看文档, 遇到什么概念不清楚就去网上搜然后摘抄过来, 而现在我基本上是看官方文档+问AI+本地笔记软件obsidian记笔记结合.<br><br>3. 还有一些文章记录的是我在编程时遇到的各种问题, 这些问题很常见并且在网上一搜就能轻松搜到很多雷同的. 实际上这些文章里的解决方法我也是搜索得来, 里面缺少自己的思考.<br><br>于是趁着这次数据迁移的机会, 一并把这些"问题文章"清理了. 希望让这篇文章成为一个新的开始, 今后写一些自己实践过的, 带有自己思考的东西.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>shell编程:输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html"/>
        <id>https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html</id>
            <category term="Linux"/>

        <updated>2021-05-09T21:00:00+08:00</updated>
            <summary>
                <![CDATA[
                    做实验时碰的到一道shell编程题: 输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天 本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧 脚本很简单, 主要是用date命令 #!/bin/bash #create By Merack&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>做实验时碰的到一道shell编程题:<br>输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天<br>本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧<br>脚本很简单, 主要是用date命令  </p><pre><code class="language-sh">#!/bin/bash
#create By Merack
#merack@qq.com


#get the current year, month, day
currentYear=`date +&quot;%Y&quot;`
currentMonth=`date +&quot;%m&quot;`
currentDay=`date +&quot;%d&quot;`

#check whether the birthday has passed in this year 
if [[ currentMonth -lt $2  ]]
then
    let &quot;passFlag=0&quot;
elif [[ currentMonth -eq $2 ]]
then
    if [[ currentDay -gt $3  ]]
    then
        let &quot;passFlag=1&quot;
    else
        let &quot;passFlag=0&quot;
    fi
else
    let &quot;passFlag=1&quot;
fi

#get age
if [[ $passFlag -eq 0  ]] 
then
    let &quot;age=$currentYear-$1-1&quot;
else
    let &quot;age=$currentYear-$1&quot;
fi
echo &quot;your age: $age&quot;


#get next Birthday
if [[ passFlag -eq 1 ]]
then
    echo &quot;Your birthday has passed in this year&quot;
        let &quot;nextYea=currentYear+1&quot;
        nextBirthday=$nextYea-$2-$3
        nowStr=`date +&quot;%s&quot;`
        nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`
        let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;
        echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;
else
    nextBirthday=$currentYear-$2-$3
    nowStr=`date +&quot;%s&quot;`
    nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`
    let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;
    echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;
fi
</code></pre>
<p>运行结果:<br><figure class="post__image"><img loading="lazy" src="https://cdn.merack.top/wp-content/uploads/2021/05/790caf37116577e34a9d4e311f7faca8.png" alt="pic1.png" data-is-external-image="true"></figure></p>
            ]]>
        </content>
    </entry>
</feed>
