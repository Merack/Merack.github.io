<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Merack&#x27;s Home</title>
    <link href="https://blog.merack.top/feed.xml" rel="self" />
    <link href="https://blog.merack.top" />
    <updated>2024-12-03T16:28:00+08:00</updated>
    <author>
        <name>Merack</name>
    </author>
    <id>https://blog.merack.top</id>

    <entry>
        <title>WordPress 安全防护简单记录</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/wordpress-an-quan-fang-hu-jian-dan-ji-lu.html"/>
        <id>https://blog.merack.top/wordpress-an-quan-fang-hu-jian-dan-ji-lu.html</id>

        <updated>2024-12-03T16:08:29+08:00</updated>
            <summary>
                <![CDATA[
                    WordPress网站一直是被恶意程序扫描和密码爆破的重灾区, 每次一查Nginx日志都能看到一大堆对本博客的密码撞库攻击和敏感路径扫描 在几年前由于用了弱密码还真被爆破成功, 虽然我很快就改了密码但由于不确定是否有留下暗桩, 索性重装了一遍系统, 都是血泪教训. 随着跑在服务器上的业务越来越多, 重装的代价已经是非常大了. 从那次事故以后我便开始留意WordPress的安全防护, 下面是我这些年来做的配置的一些简单记录.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <figure class="alignnone size-full wp-image-90">WordPress网站一直是被恶意程序扫描和密码爆破的重灾区, 每次一查Nginx日志都能看到一大堆对本博客的密码撞库攻击和敏感路径扫描 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/9b08f457-b2a4-5f21-d949-5a2b0acc872d.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/9b08f457-b2a4-5f21-d949-5a2b0acc872d.png" alt="" width="788" height="323" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2024/12/5486867a-cf9d-feff-1934-2d0d6466e649.png"><figure class="alignnone size-full wp-image-86"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/5486867a-cf9d-feff-1934-2d0d6466e649.png" alt="" width="1908" height="796" data-is-external-image="true"></figure></a> 在几年前由于用了弱密码还真被爆破成功, 虽然我很快就改了密码但由于不确定是否有留下暗桩, 索性重装了一遍系统, 都是血泪教训. 随着跑在服务器上的业务越来越多, 重装的代价已经是非常大了. 从那次事故以后我便开始留意WordPress的安全防护, 下面是我这些年来做的配置的一些简单记录.</p>
<h2>1. WordPress插件篇</h2>
<figure class="alignnone size-full wp-image-87">WordPress推荐使用插件 <a href="https://cn.wordpress.org/plugins/login-lockdown/">Login Lockdow</a> 的登录验证码功能, 类型直接选择built-in Captcha即刻, 亲测可以抵挡99%的密码撞库程序 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/76a96c65-1ce4-0d1a-246e-195ccd5196d2.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/76a96c65-1ce4-0d1a-246e-195ccd5196d2.png" alt="" width="1465" height="688" data-is-external-image="true"></figure></a> 可以看到登录失败的全是给验证码拦截了 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/728b31a3-18d1-60cc-e079-6f9595280706.png"><figure class="alignnone size-full wp-image-88"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/728b31a3-18d1-60cc-e079-6f9595280706.png" alt="" width="1504" height="598" data-is-external-image="true"></figure></a> WordPress上还有很多更加全面的安全插件, 但过多或者过于复杂的插件会减慢站点速度, 特别是对我在用这个小鸡性能很一般, 因此我会更倾向在下面几个方面来做后续的防护.</p>
<h2>2.Nginx篇</h2>
<p>在Nginx上我主要是对WordPress中的一些敏感路径进行访问限制, 主要配置如下</p>
<div>
<pre>   #禁止以. 开头的文件访问, 如.htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny all;
    }

    #禁止访问路径 /xmlrpc.php
    location ~ /xmlrpc.php$ {
        deny all;
    }

    #禁止访问路径 /wp-json/wp/v2/users
    location ~ ^/wp-json/wp/v2/users {
        deny all;
    }

    #禁止访问路径 /wp-includes/wlwmanifest.xml
    location ~ ^/wp-includes/wlwmanifest.xml {
        deny all;
    }

    #禁止直接访问uploads和files文件夹下的php文件
    location ~ /(?:uploads|files)/.*\.php$ {
        deny all;
    }</pre>
</div>
<div>其中<code>/xmlrpc.php</code>是除了/wp-login.php 之外的另一种可以用来验证后台密码的方式, 因此也经常会被用来做密码撞库;</div>
<div><code>/wp-json/wp/v2/users</code> 会返回后台管理员的登录用户名, 建议禁止并且管理员登录名不要设置成Admin这种常见的;</div>
<div><code>/wp-includes/wlwmanifest.xml</code> 是我在别的博客看到的, 但是新版WordPress好像移除了这个文件, 反正我用的版本目录下没有, 关于这个文件的限制可以不写, 最重要的还是前面两个路径.</div>
<h2>3.CDN篇</h2>
<p>如果你的网站套了CDN的话, 可以通过CDN里提供的一些配置来相关的防护. 不同CDN提供商的功能都有所不同, 这里我主要记录我正在用的两家CDN的配置.</p>
<h3>3.1 又拍云</h3>
<figure class="alignnone size-full wp-image-89">在CDN的访问控制选项下又拍云提供了网站安全防护的基本功能, 我主要用到的是 IP 访问限制 和 WAF保护 这两个. ip访问限制可以对敏感路径设置一个阈值, 如果某个ip在短时间内对该路径的请求超过该阈值, 那么它可能是在做密码撞库, 这时就会禁止他的访问请求. 我的配置如下 <a href="https://cdn.merack.top/wp-content/uploads/2024/12/b671f607-2ba8-fac4-b8a3-6bfcadeb8430.png"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/b671f607-2ba8-fac4-b8a3-6bfcadeb8430.png" alt="" width="1373" height="392" data-is-external-image="true"></figure></a> 我的阈值设置成20次/分, 封禁时间是8400秒, 可以多观察网站的访问日志, 根据自己的情况来建议在上方的ip白名单中加入自己的ip防止误杀. 又拍云也提供了 WAF保护, 但是只有一个功能开关, 不能配置规则, 也没有分析统计, 在这方面不如Cloudflare. 这项配置没什么好说的, 打开就好.</p>
<h3>3.2 Cloudflare</h3>
<p>相较于又拍云, Cloudflare提供的安全防护就全面了很多. 提供了WAF, DDoS防护, 页面规则等一系列功能, 其中WAF是可以自己写规则的, 可以说是非常丰富了. 我在Cloudflare上的安全配置基本都是在WAF里, 下面是我写的一些规则:</p>
<p><strong>第一条</strong>是专门为WordPress写的, 一是阻止WordPress的敏感路径扫描,二是阻止规定以外的ip进行登录请求</p>
<pre>(http.host wildcard "merack.top") and ((cf.waf.credential_check.password_leaked) or (http.request.uri.path wildcard r"/wp-login.php" and (ip.geoip.country ne "CN" and (not ip.src in {192.168.1.1}))) or ((http.request.uri.path wildcard r"/xmlrpc.php") or (http.request.uri.path wildcard r"/wp-json/wp/v2/users"))) 
</pre>
<p><code>http.host wildcard "merack.top"</code> 表示只匹配对merack.top的访问;</p>
<p><code>cf.waf.credential_check.password_leaked</code> 表示cf会检测登录请求中的密码是否是已知的通过各种信息泄露事件泄露过的密码, 具体描述可以看Cloudflare官方的这篇文档, 不少自动程序除了尝试弱密码组合之外还会尝试泄露过的数据库中的密码; http.request.uri.path wildcard r"/wp-login.php" 表示匹配访问路径是/wp-login.php的请求;</p>
<p><code>ip.geoip.country ne "CN" and (not ip.src in {192.168.1.1})</code> 表示匹配请求ip不是来自中国的并且不在受信任ip里的(这里以192.168.1.1)为例, 建议将正在托管WordPress的服务器ip加入到列表中, 因为通过Nginx日志观察, WordPress会定时请求自身来触发一些定时任务(比如/wp-login.php), 如果你的服务器ip恰好不在中国内又不在信任ip列表中, 那么可能会被拦截, 也可以在这条waf规则前再写一条白名单规则放行; </p>
<p><code>(http.request.uri.path wildcard r"/xmlrpc.php") or (http.request.uri.path wildcard r"/wp-json/wp/v2/users")</code> 表示匹配这两个敏感路径的请求, 这两个路径在前面已经做过介绍.</p>
<p>最后将这几个匹配条件按照相应的逻辑通过逻辑and 和 or 连接起来, 大概如下图</p>
<figure class="alignnone size-full wp-image-91"><a href="https://cdn.merack.top/wp-content/uploads/2024/12/e024a11d-1bc1-49c0-2ce5-b9c820a969a6.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img  src="https://cdn.merack.top/wp-content/uploads/2024/12/e024a11d-1bc1-49c0-2ce5-b9c820a969a6.png" alt="" width="1345" height="680" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 效果还是很可观的 </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/2b48a6ef-e98f-d323-caa8-b18f104aa1c3.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><figure class="alignnone size-full wp-image-92"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/2b48a6ef-e98f-d323-caa8-b18f104aa1c3.png" alt="" width="1252" height="724" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> </span></p>
<figure class="alignnone size-full wp-image-94"><strong style="font-family: var(--editor-font-family); font-size: inherit;">第二条</strong><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">规则是对域名下的所有站点都生效的, 主要是防止除了已知的搜索引擎的蜘蛛机器人之外的其他自动程序和高风险IP对站点进行扫描, 这里的逻辑比较简单, 直接用可视化的表达式生成器即可: </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/3707771e-3617-5d48-49a0-1bb4679e2e2b.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/3707771e-3617-5d48-49a0-1bb4679e2e2b.png" alt="" width="1329" height="774" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 与第一条规则不同, 这里没有指定 </span><code style="font-weight: var(--font-weight-normal);">http.host wildcard "merack.top"</code><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> , 所以该条规则对域名下的所有子域名都有效.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">图中的威胁分数是Cloudflare对ip的恶意程度进行的一个评估, 请求的威胁评分值为0到100, 其中0表示低风险. 大于10的值可能表示垃圾邮件发送者或机器人, 大于40的值表示互联网上的不良行为者, 很少有超过60的值. 详细描述可以参照官方的</span><a href="https://developers.cloudflare.com/ruleset-engine/rules-language/fields/dynamic-fields/#cfthreat_score" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">这个文档</a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">.官方推荐设置大于10触发托管质询, 大于50直接block.</span></p>
<p><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">下面的选择操作-&gt;托管质询 是指Cloudflare会生成一个用于人机验证的验证页面, 通过验证才可以继续访问.</span></p>
<figure class="alignnone size-full wp-image-95"><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);">最后的规则总览 </span><a href="https://cdn.merack.top/wp-content/uploads/2024/12/8dfc073c-61b8-c22e-5218-f564ac2b3580.png" style="font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/12/8dfc073c-61b8-c22e-5218-f564ac2b3580.png" alt="" width="1341" height="573" data-is-external-image="true"></figure></a><span style="color: var(--text-primary-color); font-family: var(--editor-font-family); font-size: inherit; font-weight: var(--font-weight-normal);"> 执行质询类的操作都会自动计算一个CRS值, 这个值可以体现质询规则的有效性, 越低表示误杀的真实用户越少, 则效果越好.<br>如果在CSR为0的同时Nginx日志中还有大量的路径扫描请求记录, 那么可以尝试降低威胁分数的值, 也有可能是这些IP未被收录在Cloudflare的数据库中所以不触发质询, 总之这个要慢慢调, 防扫描我还在学习中. 这条规则我也是刚写等待后面的测试.</span></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用又拍云加速WordPress简要配置, 解决后台样式失效, 后台功能点击无反应问题</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shi-yong-you-pai-yun-jia-su-wordpresshou-tai-yang-shi-shi-xiao-hou-tai-cai-dan-gong-neng-dian-ji-wu-fan-ying-jie-jue-fang-fa-ji-jian-yao-pei-zhi.html"/>
        <id>https://blog.merack.top/shi-yong-you-pai-yun-jia-su-wordpresshou-tai-yang-shi-shi-xiao-hou-tai-cai-dan-gong-neng-dian-ji-wu-fan-ying-jie-jue-fang-fa-ji-jian-yao-pei-zhi.html</id>

        <updated>2024-06-19T20:48:00+08:00</updated>
            <summary>
                <![CDATA[
                    之前写了一篇又拍云加速静态网站GitHub Pages的文章, 现在这篇文章就来介绍一下又拍云加速动态网站WordPress的配置以及遇到的一些坑. 又拍云为开发者提供每月免费额度, 可以到下面的链接注册申请: 服务的创建, CNAME绑定和一些基本的配置可以参考我的上一篇文章, 但是有一些CDN的配置要做出调整, 否则会造成网站异常, 主要是在后台页面.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>之前写了一篇<a href="https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html" target="_blank" rel="noopener noreferrer">又拍云加速静态网站GitHub Pages</a>的文章, 现在这篇文章就来介绍一下又拍云加速动态网站WordPress的配置以及遇到的一些坑. 又拍云为开发者提供每月免费额度, 可以到下面的链接注册申请: </p>
<ol>
<li>又拍云账号: <a href="https://console.upyun.com/register/?invite=SJxy8d1Sw" target="_blank" rel="noopener">点我注册</a></li>
<li>注册完毕后可以到 <a href="https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral" target="_blank" rel="noopener">又拍云联盟</a>页面按要求申请开发者每月免费配额</li>
</ol>
<p>服务的创建, CNAME绑定和一些基本的配置可以参考我的上一篇文章, 但是有一些CDN的配置要做出调整, 否则会造成网站异常, 主要是在后台页面. 下面是我是用过程中遇到的一些坑.</p>
<h2>1. 后台菜单功能点击无反应, 功能异常</h2>
<figure class="alignnone size-full wp-image-58">原因是又拍云默认规则是忽略URL '?' 后面的的参数. 但是如下图所示, WordPress后台功能基本上都是需要通过URL传进来的参数才能正常工作的 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001806.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001806.png" alt="" width="699" height="437" data-is-external-image="true"></figure></a> <a href="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001941.png"><figure class="alignnone size-full wp-image-59"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/微信截图_20190215001941.png" alt="" width="761" height="500" data-is-external-image="true"></figure></a> 解决方法是在缓存控制选项卡下的参数跟随中选择全程跟随, 这样流量流经CDN时就不会去掉后面的参数, 源站就能正确接受到前端发过来的参数 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-08-28.png"><figure class="alignnone size-full wp-image-61"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-08-28.png" alt="" width="1411" height="348" data-is-external-image="true"></figure></a></p>
<h2>2. 后台样式失效</h2>
<p>如果你的WordPress站主页正常但是后台页面样式丢失, 并且控制台报了很多/wp-admin/load-scripts.php 加载的js的错误, 那么就要去调整又拍云的缓存规则. 虽说又拍云自己声称可以自动分辨处理动静态资源, 同时加速动静态请求, 但目前来看又拍云对于WordPress 的load-scripts.php动态加载的js的处理还存在问题. 为了防止动态请求出现奇奇怪怪的问题, 我们直接将以下两个包含WordPress核心代码文件的目录加入到缓存控制-&gt;缓存配置的 <span style="color: #f1c40f;"><strong>不缓存规则</strong></span> 中</p>
<pre>/wp-includes/*
/wp-admin/*</pre>
<figure class="alignnone size-full wp-image-60"><a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-33-08.png"><img  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-33-08.png" alt="" width="1366" height="473" data-is-external-image="true"></figure></a> 处理完成后强烈建议在CDN服务管理页点击一次全站刷新, 让CDN节点上旧的缓存过期 <a href="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-39-08.png"><figure class="alignnone size-full wp-image-62"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0619_10-39-08.png" alt="" width="1304" height="420" data-is-external-image="true"></figure></a></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>解决Ubuntu安装MySQL8.0后 数据库root设置密码无效, root无需密码或密码错误都可登录</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/ubuntu2404an-zhuang-mysql80yu-dao-de-yi-xie-wen-ti-shu-ju-ku-rootzhang-hu-she-zhi-mi-ma-wu-xiao-rootzhang-hu-wu-xu-mi-ma-huo-mi-ma-cuo-wu-du-ke-deng-lu-yi-ji-qi-ta-cao-zuo-ji-lu.html"/>
        <id>https://blog.merack.top/ubuntu2404an-zhuang-mysql80yu-dao-de-yi-xie-wen-ti-shu-ju-ku-rootzhang-hu-she-zhi-mi-ma-wu-xiao-rootzhang-hu-wu-xu-mi-ma-huo-mi-ma-cuo-wu-du-ke-deng-lu-yi-ji-qi-ta-cao-zuo-ji-lu.html</id>
            <category term="Linux"/>

        <updated>2024-06-16T23:06:31+08:00</updated>
            <summary>
                <![CDATA[
                    Ubuntu24.04使用apt-get安装MySQL8.0后发现数据库的root账户竟然不用密码也能登录尝试随便输入一个密码也能登录, 使用 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new passwd'; 语句修改密码后问题依然存在,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>Ubuntu24.04使用apt-get安装MySQL8.0后发现数据库的root账户竟然不用密码也能登录<figure class="alignnone size-full wp-image-41"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-04-26.png" alt="" width="708" height="279" data-is-external-image="true"></figure>尝试随便输入一个密码也能登录, 使用 ALTER USER 'root'@'localhost' IDENTIFIED BY 'new passwd'; 语句修改密码后问题依然存在, 以前使用MySQL5.7并未发现相关的问题.</p>
<h3>原因</h3>
<p>通过查找资料发现是MySQL8.0开始更改了root账户的默认密码验证插件为<a href="https://dev.mysql.com/doc/mysql-secure-deployment-guide/8.0/en/secure-deployment-configure-authentication.html">auth_socket</a>导致的, 可以通过一下命令查看数据库中的用户使用的身份验证插件:</p>
<pre>SELECT user, host, plugin FROM mysql.user;</pre>
<figure class="alignnone size-full wp-image-43"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-32-04.png" alt="" width="535" height="254" data-is-external-image="true"></figure><br>可以看到root使用的身份验证插件是auth_socket, 其他用户默认是caching_sha2_password. auth_socket这个插件是通过Unix socket文件来进行身份验证, 简单来说就是你在Linux系统的登录名为root, 那么当登录数据库的root账号时数据库会与系统进行socket通信, 发现要登录的用户名是相同的, 那么就会允许这次登录, 详细信息可以看MySQL的官方文档: <a href="https://dev.mysql.com/doc/mysql-secure-deployment-guide/8.0/en/secure-deployment-configure-authentication.html">auth_socket</a> 以及这篇文章: <a href="https://segmentfault.com/a/1190000039860881">https://segmentfault.com/a/1190000039860881</a><br>MySQL8.0以上将其作为root的默认身份插件有一定的道理, 首先, Unix socket通信只能是在本机的程序之间进行, 不会通过TCP/IP网络栈, 不用当心来自外部的爆破;  二是Linux本身的身份验证已经很完善, 用户如果能以root登录系统, 那么无论使用何种插件都能被轻易地修改密码.</p>
<h3>更改身份验证插件</h3>
<p>如果想用账户密码方式的身份验证, 可以通过以下语句更改, WITH 后面是身份验证插件名称, BY 后面是登录密码:</p>
<pre>ALTER USER 'root'@'localhost' IDENTIFIED WITH caching_sha2_password BY 'new password';</pre>
<figure class="alignnone size-full wp-image-43"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-53-04.png" alt="" width="797" height="323" data-is-external-image="true"></figure>
<p>可以看到root的身份验证插件已经改为caching_sha2_password<br>改完以后需要提供正确的密码才能登录<figure class="alignnone size-full wp-image-44"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_21-56-15.png" alt="" width="768" height="98" data-is-external-image="true"></figure>需要注意的是, 有一些文章WITH 后面跟的是mysql_native_password, 但是根据官方文档: <a href="https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html">https://dev.mysql.com/doc/refman/8.0/en/native-pluggable-authentication.html</a> 中的描述, mysql_native_password插件会在MySQL 8.0.34中弃用并且在后续版本中删除, 官方更推荐caching_sha2_password, 具有更好的安全性.</p>
<h3>mysql_secure_installation</h3>
<p>实际上, 根据MySQL官方文档"安装后的设置与测试"(<a href="https://dev.mysql.com/doc/refman/8.0/en/postinstallation.html">Postinstallation Setup and Testing</a> )一节中的<a href="https://dev.mysql.com/doc/refman/8.0/en/default-privileges.html">Securing the Initial MySQL Account</a> 小节里提到了mysql_secure_installation这个程序, 他随MySQL一同安装, 用于对MySQL安装后, 上线生产环境前的安全初始化, 其中主要包括以下功能:<br>1. 为root账户设置密码;<br>2. 禁止root账户远程访问;<br>3. 删除匿名账户;<br>4. 删除test数据库;</p>
<p>如果你安装完MySQL后运行这个程序, 就能发现问题所在, 程序提示root用户正在使用auth_socket, 因此跳过密码设置, 所以平时还是要多看看文档^_^<figure class="alignnone size-full wp-image-45"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0616_22-45-39.png" alt="" width="1023" height="320" data-is-external-image="true"></figure>
<h3>内存优化</h3>
<p>如果你的主机内存很小, 那么建议修改MySQL配置文件, 在 [mysqld] 下添加:<br><code>performance_schema = off</code><br>亲测可以减少100多M的内存, <code>performance_schema</code> 是用来记录MySQL查询性能相关的记录, 用于给数据库管理员做性能分析的, 如果你没有这方面的需求, 那么可以关闭它.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用又拍云加速GitHub Pages简要配置</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html"/>
        <id>https://blog.merack.top/yong-you-pai-yun-zuo-wei-cdnjia-su-github-pagesjian-yao-pei-zhi-ji-lu-2.html</id>

        <updated>2024-06-07T20:56:06+08:00</updated>
            <summary>
                <![CDATA[
                    <p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>

                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>GitHub Pages为GitHub上的项目提供主页托管功能, 我们可以用它来托管我们的静态网站. 但是由于GitHub Pages服务器在国外, 因此在国内的访问速度可能不太理想.但是我们可以通过CDN来加速它的访问速度. 正巧又拍云推出了开发者计划, 为开发者提供每月10G的云存储和15G的CDN流量, 对于个人网站来说已经足够了. 下面是我为GitHub Pages配置又拍云CDN加速的一些简要配置记录.</p>

<h2 data-heading="必备条件">必备条件</h2>
<ol>
<li>已经备案的域名(国内的CDN厂商基本都要求)</li>
<li>又拍云账号: <a href="https://console.upyun.com/register/?invite=SJxy8d1Sw" target="_blank" rel="noopener noreferrer">点我注册</a>, 注册完毕后可以到 <a href="https://www.upyun.com/?utm_source=lianmeng&amp;utm_medium=referral" target="_blank" rel="noopener noreferrer">又拍云联盟</a>页面按要求申请开发者每月免费配额, 一般在自己网站挂一个又拍云的logo然后提交申请就可以了.需要注意的是, 当前你的网站是要有一定内容的不然不会通过(实测我的博客就发了三篇文章就申请通过了).</li>
</ol>
<h2 data-heading="简要配置">简要配置</h2>
<h3 data-heading="GitHub Pages设置">GitHub Pages设置</h3>
<p>静态网站如何生成不在本文讨论范围, 这里只讨论自定义域名相关话题. 在托管静态网站的GitHub仓库中点击Settings-&gt;Pages-&gt;Custom domain 中配置你已经备案的域名, 比如我这里是blog.merack.top. 需要注意的是如果你的page不是由GitHub Actions workflow生成的, 那么需要确认仓库根目录中有一个CNAME文件, 里面存储的是你自定义域名, 具体请看GitHub Pages的文档: <a rel="noopener" class="external-link" href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors" target="_blank">https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/troubleshooting-custom-domains-and-github-pages#cname-errors</a></p>
<h3 data-heading="又拍云设置">又拍云设置</h3>
<h4 data-heading="创建服务">创建服务</h4>
<p>在又拍云创建CDN服务, 加速域名填你已备案的自定义域名, 应用场景选网页图片, 实际上根据<a data-tooltip-position="top" aria-label="https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f" rel="noopener" class="external-link" href="https://help.upyun.com/knowledge-base/%e6%8e%a7%e5%88%b6%e5%8f%b0%e6%9c%8d%e5%8a%a1%e9%85%8d%e7%bd%ae/#1-e68891e683b3e4bfaee694b9e5ba94e794a8e59cbae699afefbc8ce8afb7e997aee6808ee4b988e4bfaee694b9efbc9f" target="_blank">又拍云的文档</a>目前应用场景只是一个标示, 功能是一样的, 随便选也行. 创建完成后又拍云会给出一个CNAME域名, 在域名域名解析中为域名创建一个CNAME记录, 记录值是又拍云会给出的这个CNAME域名.</p>
<div><figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717757460.png" alt="" width="1228" height="292" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717757460-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717757460-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757460-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757460-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717757460-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717757460-2xl.png 1920w"></figure></div>
<p>回源协议选协议跟随,源站证书校验我这里没开, 源站地址根据<a data-tooltip-position="top" aria-label="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" rel="noopener" class="external-link" href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank">GitHub Pages的文档</a>填以下IP(建议配置的时候去文档里找, 防止GitHub那边更新IP), 然后点击确定创建服务.</p>
<p><code>185.199.108.153<br>185.199.109.153<br>185.199.110.153<br>185.199.111.153</code></p>
<figure class="post__image"><img  src="https://blog.merack.top/media/posts/8/1717758315.png" alt="" width="944" height="426" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717758315-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717758315-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717758315-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717758315-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717758315-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717758315-2xl.png 1920w"></figure><br><figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717757656.png" alt="" width="824" height="545" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717757656-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717757656-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717757656-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717757656-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717757656-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717757656-2xl.png 1920w"></figure>
<h4>CDN功能设置</h4>
<p>接着进入到CDN功能配置.</p>
<h5>回源管理</h5>
<p>在回源管理中回源Host中填入你自己的自定义域名,  比如我这里是blog.merack.top, 因为源站设置中的IP托管了成千上万个GitHub Pages, 需要回源Host中的域名才能找到你的.</p>
<figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717760653.png" alt="" width="1280" height="271" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717760653-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717760653-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717760653-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717760653-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717760653-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717760653-2xl.png 1920w"></figure>
<p><strong>注意!!!</strong>: 如果你在上面的步骤中已经为GitHub仓库配置了自定义域名, 这里的回源Host填上的就是该域名, 而不是xxx.github.io, 否则会造成too many redirects 的错误.</p>
<h5>验证</h5>
<p>到这里就可以就可以验证是否配置成功了, 直接ping 或者dig我们的域名, 如果返回的是nm.aicdn.com, 那么就表示我们成功解析到了CDN,访问网站检查是否有其他问题</p>
<figure class="post__image"><img loading="lazy"  src="https://blog.merack.top/media/posts/8/1717761171.png" alt="" width="576" height="252" sizes="(max-width: 1920px) 100vw, 1920px" srcset="https://blog.merack.top/media/posts/8/responsive/1717761171-xs.png 640w ,https://blog.merack.top/media/posts/8/responsive/1717761171-sm.png 768w ,https://blog.merack.top/media/posts/8/responsive/1717761171-md.png 1024w ,https://blog.merack.top/media/posts/8/responsive/1717761171-lg.png 1366w ,https://blog.merack.top/media/posts/8/responsive/1717761171-xl.png 1600w ,https://blog.merack.top/media/posts/8/responsive/1717761171-2xl.png 1920w"></figure>
<p>更进一步, 可以使用一些在线ping网站来检测CDN是否根据不同地区就近返回: <a href="https://www.itdog.cn/ping">https://www.itdog.cn/ping</a></p>
<h5>HTTPS</h5>
<p>此外强烈建议配置下https, 又拍云申购SSL证书中选择Let's Encrypt是免费的, 又拍云会自动帮你续期.</p>
<h5>其他配置与注意事项</h5>
<ol>
<li>其他的配置按需求点点就行, 需要注意的是我看到一些资料说HTTP 302 调度这个功能可能会造成一些问题, 建议不开这个. </li>
<li>如果要开源站资源迁移这个功能, 需要配合缓存配置中将资源缓存时间配置为24小时以上才会触发迁移. 如果要验证缓存时间可以通过浏览器的开发者工具检查响应头的Cache-Control字段, 具体可以看<a href="https://docs.upyun.com/cdn/guide/#_6">又拍云的这个文档</a> (https://docs.upyun.com/cdn/guide/#_6). 不过, 除非你了解<a href="https://help.upyun.com/knowledge-base/cdn-source-resource-move/">源站资源迁移的访问机制</a> (https://help.upyun.com/knowledge-base/cdn-source-resource-move/), 否则不建议开启, 会对资源更新造成一些问题.</li>
<li>如果你的域名挂靠在Cloudflare, 请勿给根域名(即不带任何前缀, 主机记录为@的那个域名 )做CNAME解析(例如, 不能为merack.top添加又拍云的CNAME记录), 因为根据<a href="https://datatracker.ietf.org/doc/html/rfc1912">RFC1912</a>，域名根域名不得存在 CNAME 记录，根域名的 CNAME 记录会与域名的 MX 邮箱记录、TXT 域名验证记录发生冲突, Cloudflare会将该CNAME记录展平(<a href="https://developers.cloudflare.com/dns/cname-flattening/">CNAME flattening</a>), 指向的是又拍云在国外的某个节点, 无论国内国外访问都是请求的这个节点的资源, 那么这就失去了CDN的功能.<br><figure class="alignnone size-full wp-image-40"><img loading="lazy"  src="https://cdn.merack.top/wp-content/uploads/2024/06/screenshot_2024_0605_11-58-14.png" alt="" width="1238" height="150" data-is-external-image="true"></figure></li>
</ol>
<h2>结语</h2>
<p>到此又拍云CDN加速GitHub Pages就配置完成了, 本文只是我配置时的一些简要记录, 仅供参考. 如果遇到问题可以通过邮件与我交流. 像其他的一些静态网站加速, 例如GitLab, Vercel, Netlify, Cloudflare Pages, 思路应该也大致相同, 但还是要根据不同平台调整.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>shell编程:输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html"/>
        <id>https://blog.merack.top/shellbian-chengshu-ru-yi-ge-ren-de-chu-sheng-ri-qiji-suan-ci-ren-jin-nian-duo-shao-suibing-ji-suan-jin-tian-ju-ci-ren-jin-nian-sheng-ri-huan-you-duo-shao-tian.html</id>
            <category term="Linux"/>

        <updated>2021-05-09T21:00:00+08:00</updated>
            <summary>
                <![CDATA[
                    做实验时碰的到一道shell编程题: 输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天 本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧 脚本很简单, 主要是用date命令 #!/bin/bash #create By Merack&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>做实验时碰的到一道shell编程题:<br>输入一个人的出生日期，计算此人今年多少岁，并计算今天距此人今年生日还有多少天<br>本来想偷懒百度抄一下的结果翻了几页都没有, 算了还是自己写吧<br>脚本很简单, 主要是用date命令  </p><pre><code class="language-sh">#!/bin/bash
#create By Merack
#merack@qq.com


#get the current year, month, day
currentYear=`date +&quot;%Y&quot;`
currentMonth=`date +&quot;%m&quot;`
currentDay=`date +&quot;%d&quot;`

#check whether the birthday has passed in this year 
if [[ currentMonth -lt $2  ]]
then
    let &quot;passFlag=0&quot;
elif [[ currentMonth -eq $2 ]]
then
    if [[ currentDay -gt $3  ]]
    then
        let &quot;passFlag=1&quot;
    else
        let &quot;passFlag=0&quot;
    fi
else
    let &quot;passFlag=1&quot;
fi

#get age
if [[ $passFlag -eq 0  ]] 
then
    let &quot;age=$currentYear-$1-1&quot;
else
    let &quot;age=$currentYear-$1&quot;
fi
echo &quot;your age: $age&quot;


#get next Birthday
if [[ passFlag -eq 1 ]]
then
    echo &quot;Your birthday has passed in this year&quot;
        let &quot;nextYea=currentYear+1&quot;
        nextBirthday=$nextYea-$2-$3
        nowStr=`date +&quot;%s&quot;`
        nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`
        let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;
        echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;
else
    nextBirthday=$currentYear-$2-$3
    nowStr=`date +&quot;%s&quot;`
    nextBirStr=`date -d &quot;$nextBirthday&quot; +&quot;%s&quot;`
    let &quot;interval=(nextBirStr-nowStr)/60/60/24&quot;
    echo &quot;Your next birthday is: $nextBirthday and $interval days left&quot;
fi
</code></pre>
<p>运行结果:<br><figure class="post__image"><img loading="lazy" src="https://pic.rmb.bdstatic.com/bjh/790caf37116577e34a9d4e311f7faca8.png" alt="pic1.png"  data-is-external-image="true"></figure></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>“百度杯”CTF比赛 十一月场 &#x27;小可爱&#x27; writeup(伪)</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/bai-du-beictfbi-sai-shi-yi-yue-chang-xiao-ke-ai-writeupwei.html"/>
        <id>https://blog.merack.top/bai-du-beictfbi-sai-shi-yi-yue-chang-xiao-ke-ai-writeupwei.html</id>
            <category term="CTF"/>

        <updated>2020-06-28T21:02:00+08:00</updated>
            <summary>
                <![CDATA[
                    题目内容： 小可爱最喜欢的图片就是它了 tips：txt文件内容即为密码 题目给出了一张图片 附上下载链接: 百度云 1.把文件后缀改成rar,发现是一个可以打开的压缩包,不过需要密码 根据题目提示,txt文件里面的内容是密码,而txt文件名提示我们密码是8位数字, 解题的思路是通过CRC32检测来爆破txt里面的内容,从上图中我们可以看到txt的CRC32值为BACAB29E 2.跑py脚本解密&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <h4 id="题目内容：">题目内容：</h4>
<p>小可爱最喜欢的图片就是它了
tips：txt文件内容即为密码</p><!-- more -->

<p>题目给出了一张图片</p><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JfbJs.jpg" alt="wang.4409F5F40438B0C7C4C4E2D9C1883CA4.jpg"  data-is-external-image="true"></figure><p>附上下载链接:
<a href="https://pan.baidu.com/s/1tRHEDzHIzR63-E_BVxDGZg">百度云</a></p><h4 id="writeup">writeup</h4>
<p>1.把文件后缀改成rar,发现是一个可以打开的压缩包,不过需要密码</p><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JhkS1.png" alt="Screenshot_2020-01-07_23-33-22.png"  data-is-external-image="true"></figure><p>根据题目提示,txt文件里面的内容是密码,而txt文件名提示我们密码是8位数字, 解题的思路是通过CRC32检测来爆破txt里面的内容,从上图中我们可以看到txt的CRC32值为BACAB29E</p><p>2.跑py脚本解密</p><p>代码如下(Python2环境)</p><pre><code>from zlib import crc32
import random

char=&#39;0123456789&#39;

def crc32_f(data):
    return hex(crc32(data)&amp;0xffffffff)[2:10]

length=input(&#39;length:&#39;)
crc32_=raw_input(&#39;crc32:&#39;).lower()

while True:
    text=&#39;&#39;
    for i in range(length):
        text+=char[random.randint(0,len(char)-1)]
    if crc32_f(text)==crc32_:
        raw_input(&#39;find it:&#39;+text)
        exit
</code></pre>
<p>脚本运行时需要输入密码长度,这里填8, 然后是CRC密文, 这里填BACAB29E</p><p>接下来就是漫长的等待了,最后跑出密码:34878956</p><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JhEy6.png" alt="Screenshot_2020-01-08_00-54-41.png"  data-is-external-image="true"></figure><p>3.有了密码就可以把压缩包里的图片解压出来了,是一张撕裂成好几部分的二维码, 使用ps拼好或者打印出来裁剪拼好扫描结果应该就是flag了,由于不会ps最终答案你们自己来吧(逃
<figure class="post__image"><img loading="lazy" src="https://cdn.merack.top/wp-content/uploads/2020/06/qr.png" alt="qrcode"  data-is-external-image="true"></figure></p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>使用Python脚本+腾讯云serverless实现曲奇云盘自动签到(已失效)</title>
        <author>
            <name>Merack</name>
        </author>
        <link href="https://blog.merack.top/shi-yong-pythonjiao-ben-teng-xun-yun-serverlessshi-xian-qu-qi-yun-pan-zi-dong-qian-dao.html"/>
        <id>https://blog.merack.top/shi-yong-pythonjiao-ben-teng-xun-yun-serverlessshi-xian-qu-qi-yun-pan-zi-dong-qian-dao.html</id>
            <category term="Python"/>

        <updated>2020-06-27T21:04:00+08:00</updated>
            <summary>
                <![CDATA[
                    此文章已失效并且不再更新 曲奇云盘每天有3个签到任务, 其中有一个需要上传文加后才能签到, 这个没有实现自动签到现已全部实现签到 目前曲奇云盘的签到是送曲奇豆, 至于曲奇豆有什么用我个人的看法是:没什么卵用, 我写这个脚本只是练习下Python 注册腾讯云, 创建一个serverless云函数, 选择空白模板,&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><strong>此文章已失效并且不再更新</strong></p><h3 id="说明">说明</h3>
<p>曲奇云盘每天有3个签到任务, <del>其中有一个需要上传文加后才能签到, 这个没有实现自动签到</del>现已全部实现签到</p><!-- more -->

<h3 id="签到有什么用">签到有什么用?</h3>
<p>目前曲奇云盘的签到是送曲奇豆, 至于曲奇豆有什么用我个人的看法是:没什么卵用, 我写这个脚本只是练习下Python</p><h3 id="使用说明">使用说明</h3>
<h4 id="1创建serverless云函数">1.创建serverless云函数</h4>
<p>注册腾讯云, 创建一个serverless云函数, 选择空白模板, 运行环境选择Python3
<figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JflrT.png" alt="2020_0625_1593016738.png"  data-is-external-image="true"></figure></p><h4 id="2输入代码">2.输入代码</h4>
<p>将下面提供的代码复制到index.py里,目录里好像还有个config.json, 可以删了没什么用
代码gitee地址:<a href="https://gitee.com/Merack/quqiSign">
https://gitee.com/Merack/quqiSign</a></p><h4 id="3修改代码配置">3.修改代码配置</h4>
<ol>
<li>填入账号密码</li>
<li>修改<code>IS_UPLOAD</code>决定是否要开启文件上传签到功能, 改功能默认开启</li>
<li>修改<code>parent_id</code>文件上传的目录, 该值默认为0,即根目录<br>下面是获取<code>parent_id</code>的方法<br>首先登陆网页版曲奇云盘, 进入要存放上传文件的文件夹, 比如这里我的文件夹是temp<br><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9Jf8ZF.png" alt="2020_0707_1594085154.png"  data-is-external-image="true"></figure>
然后观察地址栏URl, URL末尾的数字便是<code>parent_id</code>, 比如图例里的是 88  </li>
<li>修改好后点击保存</li>
</ol>
<h4 id="4配置超时时间">4.配置超时时间</h4>
<p>因为在执行后需要等待几秒钟曲奇服务器才会记录,直接签到的话会导致逛群组签到这一项失败<br>因此在逛群组签到前我设置了5秒的休眠<br>为了防止在函数在休眠期间就被腾讯云强制停止, 这里需要把函数配置里的超时时间设置成&gt;5s, 我个人的设置是20s<br><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JfwM6.png" alt="2020_0627_1593188640.png"  data-is-external-image="true"></figure></p><h4 id="5测试">5.测试</h4>
<p>点击”函数代码”, 再点击左下角的测试, 观察执行日志来确认是否执行成功了<br><figure class="post__image"><img src="https://s1.ax1x.com/2023/05/03/p9JfBqO.png" alt="success"  data-is-external-image="true"></figure></p><p> 如果签到过了结果就是如下图<br> <figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9JfrZD.png" alt="abc"  data-is-external-image="true"></figure></p><p> 开启文件上传签到<br><figure class="post__image"><img loading="lazy" src="https://s1.ax1x.com/2023/05/03/p9Jfsde.png" alt="2020_0707_1594052871.png"  data-is-external-image="true"></figure></p><h4 id="6定时触发">6.定时触发</h4>
<p>创建一个定时触发器
我的设定是每天00:30执行签到</p><pre><code>0 30 0 * * * *
</code></pre>
<p>具体可以根据自己的情况来
根据 cron表达式文档来就行: <a href="https://cloud.tencent.com/document/product/583/9708#cron-.E8.A1.A8.E8.BE.BE.E5.BC.8F">腾讯官方文档</a>  </p><h4 id="7相关说明">7.相关说明:</h4>
<p> 1.每天自动上传到云盘里文件是代码仓库里的1.txt,上传文件我写死了就是这个, 不可以自定义.需要自定义的自己修改代码, 我懒得写了<br> 2.第一天会以新文件的方式上传, 后面便是以更新的方式上传了, 也就是文件不会增加 ,永远只有一个, 14字节的txt, 因此不用担心容量问题, 也不用定时来清理<br> 3.每次文件上传都会导致你的<strong>web端的登陆失效,手机端app登陆不受影响</strong>, 因此经常使用web端的网友请自己斟酌是否开启文件上传签到  </p>
            ]]>
        </content>
    </entry>
</feed>
